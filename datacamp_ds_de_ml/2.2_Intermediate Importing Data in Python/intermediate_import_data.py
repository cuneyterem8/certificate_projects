# Importing data from the Internet -----------------------------------------------------------------

# Import package
from urllib.request import urlretrieve

# Import pandas
import pandas as pd

# Assign url of file: url
url= 'https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv'

# Save file locally
urlretrieve(url, 'winequality-red.csv')

# Read file into a DataFrame and print its head
df = pd.read_csv('winequality-red.csv', sep=';')
print(df.head())

# Plot first column of df
df.iloc[:, 0].hist()
plt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')
plt.ylabel('count')
plt.show()

'''
   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  ...  density    pH  sulphates  alcohol  quality
0            7.4              0.70         0.00             1.9      0.076  ...    0.998  3.51       0.56      9.4        5
1            7.8              0.88         0.00             2.6      0.098  ...    0.997  3.20       0.68      9.8        5
2            7.8              0.76         0.04             2.3      0.092  ...    0.997  3.26       0.65      9.8        5
3           11.2              0.28         0.56             1.9      0.075  ...    0.998  3.16       0.58      9.8        6
4            7.4              0.70         0.00             1.9      0.076  ...    0.998  3.51       0.56      9.4        5
'''


# Import package
import pandas as pd

# Assign url of file: url
url= 'https://assets.datacamp.com/course/importing_data_into_r/latitude.xls'

# Read in all sheets of Excel file: xls
xls= pd.read_excel(url, sheet_name= None)

# Print the sheetnames to the shell
print(xls.keys())

# Print the head of the first sheet (using its name, NOT its index)
print(xls['1700'].head())

'''
dict_keys(['1700', '1900'])

                 country    1700
0            Afghanistan  34.565
1  Akrotiri and Dhekelia  34.617
2                Albania  41.312
3                Algeria  36.720
4         American Samoa -14.307
'''


# Import packages
from urllib.request import urlopen, Request

# Specify the url
url = "https://campus.datacamp.com/courses/1606/4135?ex=2"

# This packages the request: request
request= Request(url)

# Sends the request and catches the response: response
response= urlopen(request)

# Print the datatype of response
print(type(response))

# Extract the response: html
html= response.read()

# Print the html
print(html)

# Be polite and close the response!
response.close()

'''
<class 'http.client.HTTPResponse'>

b'<!doctype html><html lang="en"><head><link rel="apple-touch-icon-precomposed" sizes="57x57" href="/campus/apple-touch-icon-57x57.png"><link rel="apple-touch-icon-precomposed" sizes="114x114" href="/campus/apple-touch-icon-114x114.png"><link rel="apple-touch-icon-precomposed" sizes="72x72" href="/campus/apple-touch-icon-72x72.png"><link rel="apple-touch-icon-precomposed" sizes="144x144" href="/campus/apple-touch-icon-144x144.png"><link rel="apple-touch-icon-precomposed" sizes="60x60" href="/campus/apple-touch-icon-60x60.png"><link rel="apple-touch-icon-precomposed" sizes="120x120" href="/campus/apple-touch-icon-120x120.png"><link rel="apple-touch-icon-precomposed" sizes="76x76" href="/campus/apple-touch-icon-76x76.png"><link rel="apple-touch-icon-precomposed" sizes="152x152" href="/campus/apple-touch-icon-152x152.png"><link rel="icon" type="image/png" href="/campus/favicon.ico"><link rel="icon" type="image/png" href="/campus/favicon-196x196.png" sizes="196x196"><link rel="icon" type="image/png" href="/campus/favicon-96x96.png" sizes="96x96"><link rel="icon" type="image/png" href="/campus/favicon-32x32.png" sizes="32x32"><link rel="icon" type="image/png" href="/campus/favicon-16x16.png" sizes="16x16"><link rel="icon" type="image/png" href="/campus/favicon-128.png" sizes="128x128"><meta name="application-name" content="DataCamp"><meta name="msapplication-TileColor" content="#FFFFFF"><meta name="msapplication-TileImage" content="/campus/mstile-144x144.png"><meta name="msapplication-square70x70logo" content="/campus/mstile-70x70.png"><meta name="msapplication-square150x150logo" content="/campus/mstile-150x150.png"><meta name="msapplication-wide310x150logo" content="/campus/mstile-310x150.png"><meta name="msapplication-square310x310logo" content="/campus/mstile-310x310.png"><link href="/campus/static/css/16.3d3009c4.chunk.css" rel="stylesheet"><link href="/campus/static/css/main.c73e4582.chunk.css" rel="stylesheet"><title data-react-helmet="true">Importing flat files from the web: your turn! | Python</title><link data-react-helmet="true" rel="canonical" href="https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2"><meta data-react-helmet="true" charset="utf-8"><meta data-react-helmet="true" http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta data-react-helmet="true" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><meta data-react-helmet="true" name="fragment" content="!"><meta data-react-helmet="true" name="keywords" content="R, Python, Data analysis, interactive, learning"><meta data-react-helmet="true" name="description" content="Here is an example of Importing flat files from the web: your turn!: You are about to import your first file from the web! The flat file you will import will be &apos;winequality-red."><meta data-react-helmet="true" name="twitter:card" content="summary"><meta data-react-helmet="true" name="twitter:site" content="@DataCamp"><meta data-react-helmet="true" name="twitter:title" content="Importing flat files from the web: your turn! | Python"><meta data-react-helmet="true" name="twitter:description" content="Here is an example of Importing flat files from the web: your turn!: You are about to import your first file from the web! The flat file you will import will be &apos;winequality-red."><meta data-react-helmet="true" name="twitter:creator" content="@DataCamp"><meta data-react-helmet="true" name="twitter:image:src" content="/public/assets/images/var/twitter_share.png"><meta data-react-helmet="true" name="twitter:domain" content="www.datacamp.com"><meta data-react-helmet="true" property="og:title" content="Importing flat files from the web: your turn! | Python"><meta data-react-helmet="true" property="og:image" content="/public/assets/images/var/linkedin_share.png"><meta data-react-helmet="true" name="google-signin-clientid" content="892114885437-01a7plbsu1b2vobuhvnckmmanhb58h3a.apps.googleusercontent.com"><meta data-react-helmet="true" name="google-signin-scope" content="email profile"><meta data-react-helmet="true" name="google-signin-cookiepolicy" content="single_host_origin"></head><body><script>window.PRELOADED_STATE = "[&quot;~#iR&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;StateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;backendSession&quot;,[&quot;~#iOM&quot;,[&quot;status&quot;,[&quot;^2&quot;,[&quot;code&quot;,&quot;none&quot;,&quot;text&quot;,&quot;&quot;]],&quot;isInitSession&quot;,false,&quot;message&quot;,null]],&quot;boot&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;BootStateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;bootState&quot;,&quot;PRE_BOOTED&quot;,&quot;error&quot;,null]]],&quot;chapter&quot;,[&quot;^2&quot;,[&quot;current&quot;,[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,1,&quot;number_of_videos&quot;,3,&quot;slug&quot;,&quot;importing-data-from-the-internet-1&quot;,&quot;last_updated_on&quot;,&quot;11/08/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,12,&quot;free_preview&quot;,true,&quot;slides_link&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter1.pdf&quot;,&quot;title&quot;,&quot;Importing data from the Internet&quot;,&quot;xp&quot;,1050,&quot;id&quot;,4135,&quot;exercises&quot;,[&quot;~#iL&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Importing flat files from the web&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Importing non-flat files from the web&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Scraping the web in Python&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=10&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=11&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=12&quot;]]]],&quot;description&quot;,&quot;The web is a rich source of data from which you can extract various types of insights and findings. In this chapter, you will learn how to get data from the web, whether it is stored in files or in HTML. You&#39;ll also learn the basics of scraping and parsing web data.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]]]],&quot;codeExplanation&quot;,[&quot;^ &quot;,&quot;^8&quot;,[&quot;^ &quot;,&quot;type&quot;,&quot;initial&quot;]],&quot;contentAuthorization&quot;,[&quot;^ &quot;],&quot;course&quot;,[&quot;^2&quot;,[&quot;difficulty_level&quot;,1,&quot;reduced_outline&quot;,null,&quot;marketing_video&quot;,&quot;&quot;,&quot;active_image&quot;,&quot;course-1606-master:cb59605c00ed73a970165be3564ff450-20220811125027179&quot;,&quot;mobile_enabled&quot;,true,&quot;author_field&quot;,null,&quot;chapters&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,1,&quot;number_of_videos&quot;,3,&quot;slug&quot;,&quot;importing-data-from-the-internet-1&quot;,&quot;last_updated_on&quot;,&quot;11/08/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,12,&quot;free_preview&quot;,true,&quot;slides_link&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter1.pdf&quot;,&quot;title&quot;,&quot;Importing data from the Internet&quot;,&quot;xp&quot;,1050,&quot;id&quot;,4135,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Importing flat files from the web&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Importing non-flat files from the web&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Scraping the web in Python&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=10&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=11&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=12&quot;]]]],&quot;description&quot;,&quot;The web is a rich source of data from which you can extract various types of insights and findings. In this chapter, you will learn how to get data from the web, whether it is stored in files or in HTML. You&#39;ll also learn the basics of scraping and parsing web data.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]],[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,2,&quot;number_of_videos&quot;,2,&quot;slug&quot;,&quot;interacting-with-apis-to-import-data-from-the-web-2&quot;,&quot;last_updated_on&quot;,&quot;11/08/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,9,&quot;free_preview&quot;,null,&quot;slides_link&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter2.pdf&quot;,&quot;title&quot;,&quot;Interacting with APIs to import data from the web&quot;,&quot;xp&quot;,650,&quot;id&quot;,4136,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Introduction to APIs and JSONs&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Pop quiz: What exactly is a JSON?&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Loading and exploring a JSON&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;MultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Pop quiz: Exploring your JSON&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;APIs and interacting with the world wide web&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Pop quiz: What&#39;s an API?&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;API requests&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;JSON\xe2\x80\x93from the web to Python&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Checking out the Wikipedia API&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=9&quot;]]]],&quot;description&quot;,&quot;In this chapter, you will gain a deeper understanding of how to import data from the web. You will learn the basics of extracting data from APIs, gain insight on the importance of APIs, and practice extracting data by diving into the OMDB and Library of Congress APIs.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]],[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,3,&quot;number_of_videos&quot;,2,&quot;slug&quot;,&quot;diving-deep-into-the-twitter-api&quot;,&quot;last_updated_on&quot;,&quot;11/08/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,7,&quot;free_preview&quot;,null,&quot;slides_link&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter3.pdf&quot;,&quot;title&quot;,&quot;Diving  deep into the Twitter API&quot;,&quot;xp&quot;,600,&quot;id&quot;,4140,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;The Twitter API and Authentication&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Streaming tweets&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Load and explore your Twitter data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Twitter data to DataFrame&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;A little bit of Twitter text analysis&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;NormalExercise&quot;,&quot;title&quot;,&quot;Plotting your Twitter data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;VideoExercise&quot;,&quot;title&quot;,&quot;Final Thoughts&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=7&quot;]]]],&quot;description&quot;,&quot;In this chapter, you will consolidate your knowledge of interacting with APIs in a deep dive into the Twitter streaming API. You&#39;ll learn how to stream real-time Twitter data, and how to analyze and visualize it.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]]]],&quot;time_needed&quot;,null,&quot;author_image&quot;,&quot;https://assets.datacamp.com/production/course_1606/author_images/author_image_course_1606_20200310-1-lgdj4c?1583853939&quot;,&quot;tracks&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/data-engineer&quot;,&quot;title_with_subtitle&quot;,&quot;Data Engineer&quot;]],[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/data-scientist-professional-with-python&quot;,&quot;title_with_subtitle&quot;,&quot;Data Scientist Professional with Python&quot;]],[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/importing-cleaning-data-with-python&quot;,&quot;title_with_subtitle&quot;,&quot;Importing &amp; Cleaning Data  with Python&quot;]]]],&quot;runtime_config&quot;,null,&quot;lti_only&quot;,false,&quot;image_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/thumb/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;topic_id&quot;,8,&quot;slug&quot;,&quot;intermediate-importing-data-in-python&quot;,&quot;last_updated_on&quot;,&quot;01/08/2023&quot;,&quot;paid&quot;,true,&quot;collaborators&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/382/294/square/francis-photo.jpg?1471980001&quot;,&quot;full_name&quot;,&quot;Francisco Castro&quot;]]]],&quot;difficulty_level_hardcoded&quot;,null,&quot;time_needed_in_hours&quot;,2,&quot;technology_id&quot;,2,&quot;university&quot;,null,&quot;archived_at&quot;,null,&quot;state&quot;,&quot;live&quot;,&quot;author_bio&quot;,null,&quot;should_cache&quot;,true,&quot;sharing_links&quot;,[&quot;^2&quot;,[&quot;twitter&quot;,&quot;http://bit.ly/1eWTMJh&quot;,&quot;facebook&quot;,&quot;http://bit.ly/1iS42Do&quot;]],&quot;instructors&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;id&quot;,301837,&quot;marketing_biography&quot;,&quot;Data Scientist at DataCamp&quot;,&quot;biography&quot;,&quot;Hugo is a data scientist, educator, writer and podcaster formerly at DataCamp. His main interests are promoting data &amp; AI literacy, helping to spread data skills through organizations and society and doing amateur stand up comedy in NYC. If you want to know what he likes to talk about, definitely check out &lt;a href=\\\\&quot;https://www.datacamp.com/community/podcast\\\\&quot;&gt;DataFramed&lt;/a&gt;, the DataCamp podcast, which he hosted and produced.&quot;,&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/301/837/square/hugoaboutpic.jpg?1493154678&quot;,&quot;full_name&quot;,&quot;Hugo Bowne-Anderson&quot;,&quot;instructor_path&quot;,&quot;/instructors/hugobowne&quot;]]]],&quot;seo_title&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;title&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;xp&quot;,2300,&quot;image_thumbnail_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/thumb_home/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;short_description&quot;,&quot;Improve your Python data importing skills and learn to work with web and API data.&quot;,&quot;nb_of_subscriptions&quot;,156211,&quot;long_description&quot;,null,&quot;seo_description&quot;,&quot;Learn how to import data into Python from sources like the web and by pulling data from APIs, such as the Twitter streaming API to stream real-time tweets.&quot;,&quot;type&quot;,&quot;datacamp&quot;,&quot;link&quot;,&quot;https://www.datacamp.com/courses/intermediate-importing-data-in-python&quot;,&quot;case_study&quot;,null,&quot;id&quot;,1606,&quot;datasets&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/b422ace2fceada7b569e0ba3e8d833fddc684c4d/latitude.xls&quot;,&quot;name&quot;,&quot;Latitudes (XLS)&quot;]],[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/3ef452f83a91556ea4284624b969392c0506fb33/tweets3.txt&quot;,&quot;name&quot;,&quot;Tweets&quot;]],[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/013936d2700e2d00207ec42100d448c23692eb6f/winequality-red.csv&quot;,&quot;name&quot;,&quot;Red wine quality&quot;]]]],&quot;description&quot;,&quot;As a data scientist, you will need to clean data, wrangle and munge it, visualize it, build predictive models and interpret these models. Before you can do so, however, you will need to know how to get data into Python. In the prequel to this course, you learned many ways to import data into Python: from flat files such as .txt and .csv; from files native to other software such as Excel spreadsheets, Stata, SAS, and MATLAB files; and from relational databases such as SQLite and PostgreSQL. In this course, you&#39;ll extend this knowledge base by learning to import data from the web and by pulling data from Application Programming Interfaces\xe2\x80\x94 APIs\xe2\x80\x94such as the Twitter streaming API, which allows us to stream real-time tweets.&quot;,&quot;prerequisites&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;path&quot;,&quot;/courses/introduction-to-importing-data-in-python&quot;,&quot;title&quot;,&quot;Introduction to Importing Data in Python&quot;]]]],&quot;original_image_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/original/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;programming_language&quot;,&quot;python&quot;,&quot;external_slug&quot;,&quot;intermediate-importing-data-in-python&quot;]],&quot;exercises&quot;,[&quot;^2&quot;,[&quot;current&quot;,1,&quot;all&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;aspect_ratio&quot;,56.25,&quot;instructions&quot;,null,&quot;externalId&quot;,990668,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,null,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;runtime_config&quot;,null,&quot;number&quot;,1,&quot;video_hls&quot;,null,&quot;randomNumber&quot;,0.5911862297597621,&quot;chapter_id&quot;,4135,&quot;assignment&quot;,null,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;Importing flat files from the web&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;VideoExercise&quot;,&quot;id&quot;,990668,&quot;projector_key&quot;,&quot;course_1606_59604c018a6e132016cd26144a12fee0&quot;,&quot;video_link&quot;,null,&quot;key&quot;,&quot;e36457c7ed&quot;,&quot;course_id&quot;,1606]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import package\\\\nfrom ____ import ____\\\\n\\\\n# Import pandas\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Save file locally\\\\n\\\\n\\\\n# Read file into a DataFrame and print its head\\\\ndf = pd.read_csv(&#39;winequality-red.csv&#39;, sep=&#39;;&#39;)\\\\nprint(df.head())&quot;,&quot;sct&quot;,&quot;Ex().has_import(\\\\&quot;urllib.request.urlretrieve\\\\&quot;)\\\\nEx().has_import(\\\\&quot;pandas\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\nEx().check_function(\\\\&quot;urllib.request.urlretrieve\\\\&quot;).multi(\\\\n  check_args(0).has_equal_value(),\\\\n  check_args(1).has_equal_value()\\\\n)\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;df\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;pandas.read_csv\\\\&quot;).multi(\\\\n    check_args(0).has_equal_value(),\\\\n    check_args(1).has_equal_value()\\\\n  )\\\\n)\\\\nEx().has_printout(0)\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the function &lt;code&gt;urlretrieve&lt;/code&gt; from the subpackage &lt;code&gt;urllib.request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the function &lt;code&gt;urlretrieve()&lt;/code&gt; to save the file locally as &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Execute the remaining code to load &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; in a pandas DataFrame and to print its head to the shell.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42707,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a function &lt;code&gt;y&lt;/code&gt; from a subpackage &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;from x import y&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;This one&#39;s a long URL. Make sure you typed it in correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; to import (in the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and the &lt;em&gt;filename&lt;/em&gt; for saving the file locally as the second argument to &lt;code&gt;urlretrieve()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to change the code for loading &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; and printing its head.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,2,&quot;user&quot;,[&quot;^2&quot;,[&quot;isHintShown&quot;,false,&quot;editorTabs&quot;,[&quot;^2&quot;,[&quot;files/script.py&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;script.py&quot;,&quot;isSolution&quot;,false,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true,&quot;isClosable&quot;,false,&quot;code&quot;,null,&quot;extra&quot;,[&quot;^2&quot;,[]]]]]]]],&quot;outputMarkdownTabs&quot;,[&quot;^2&quot;,[]],&quot;markdown&quot;,[&quot;^2&quot;,[&quot;titles&quot;,[&quot;^7&quot;,[&quot;Knit PDF&quot;,&quot;Knit HTML&quot;]],&quot;activeTitle&quot;,&quot;Knit HTML&quot;]],&quot;currentXp&quot;,100,&quot;graphicalTabs&quot;,[&quot;^2&quot;,[&quot;plot&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;animation--flash&quot;,&quot;title&quot;,&quot;Plots&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;sources&quot;,[&quot;^7&quot;,[]],&quot;currentIndex&quot;,0]],&quot;dimension&quot;,[&quot;^2&quot;,[&quot;isRealSize&quot;,false,&quot;width&quot;,1,&quot;height&quot;,1]]]],&quot;html&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;animation--flash&quot;,&quot;title&quot;,&quot;HTML Viewer&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;sources&quot;,[&quot;^7&quot;,[]],&quot;currentIndex&quot;,0]]]]]],&quot;feedbackMessages&quot;,[&quot;^7&quot;,[]],&quot;lastSubmittedCode&quot;,null,&quot;ltiStatus&quot;,[&quot;^2&quot;,[]],&quot;lastSubmitActiveEditorTab&quot;,null,&quot;consoleSqlTabs&quot;,[&quot;^2&quot;,[&quot;query_result&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;&quot;,&quot;title&quot;,&quot;query result&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true,&quot;isNotView&quot;,true,&quot;message&quot;,&quot;No query executed yet...&quot;]]]]]],&quot;consoleTabs&quot;,[&quot;^2&quot;,[&quot;console&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;IPython Shell&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true]],&quot;dimension&quot;,[&quot;^2&quot;,[&quot;cols&quot;,400]]]],&quot;slides&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;Slides&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,false]]]],&quot;notes&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;Notes&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,false]]]]]],&quot;inputMarkdownTabs&quot;,[&quot;^2&quot;,[]],&quot;consoleObjectViewTabs&quot;,[&quot;^2&quot;,[]]]],&quot;randomNumber&quot;,0.5849671004547481,&quot;assignment&quot;,&quot;&lt;p&gt;You are about to import your first file from the web! The flat file you will import will be &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; from the University of California, Irvine&#39;s &lt;a href=\\\\&quot;https://archive.ics.uci.edu/ml/index.php\\\\&quot;&gt;Machine Learning repository&lt;/a&gt;. The flat file contains tabular data of physiochemical properties of red wine, such as pH, alcohol content and citric acid content, along with wine quality rating.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the file is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;\\\\n&lt;p&gt;After you import it, you&#39;ll check your working directory to confirm that it is there and then you&#39;ll load it into a &lt;code&gt;pandas&lt;/code&gt; DataFrame.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import package\\\\nfrom urllib.request import urlretrieve\\\\n\\\\n# Import pandas\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n\\\\n# Save file locally\\\\nurlretrieve(url, &#39;winequality-red.csv&#39;)\\\\n\\\\n# Read file into a DataFrame and print its head\\\\ndf = pd.read_csv(&#39;winequality-red.csv&#39;, sep=&#39;;&#39;)\\\\nprint(df.head())&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42707]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\nimport matplotlib.pyplot as plt\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Read file into a DataFrame: df\\\\n\\\\n\\\\n# Print the head of the DataFrame\\\\nprint(____)\\\\n\\\\n# Plot first column of df\\\\ndf.iloc[:, 0].hist()\\\\nplt.xlabel(&#39;fixed acidity (g(tartaric acid)/dm$^3$)&#39;)\\\\nplt.ylabel(&#39;count&#39;)\\\\nplt.show()\\\\n&quot;,&quot;sct&quot;,&quot;Ex().has_import(\\\\&quot;matplotlib.pyplot\\\\&quot;)\\\\nEx().has_import(\\\\&quot;pandas\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;df\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;pandas.read_csv\\\\&quot;).multi(\\\\n    check_args(0).has_equal_value(),\\\\n    check_args(1).has_equal_value()\\\\n  )\\\\n)\\\\nEx().has_printout(0)\\\\nEx().has_equal_ast(code=\\\\&quot;df.iloc[:, 0].hist\\\\&quot;, incorrect_msg=\\\\&quot;Please do not change the code to plot the histogram.\\\\&quot;)\\\\nEx().check_function(\\\\&quot;matplotlib.pyplot.show\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Read file into a DataFrame &lt;code&gt;df&lt;/code&gt; using &lt;code&gt;pd.read_csv()&lt;/code&gt;, recalling that the separator in the file is &lt;code&gt;&#39;;&#39;&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the head of the DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Execute the rest of the code to plot histogram of the first feature in the DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42708,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Make sure you typed the URL correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and the &lt;em&gt;separator&lt;/em&gt; as the second argument to &lt;code&gt;pd.read_csv()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The &lt;em&gt;head&lt;/em&gt; of a DataFrame can be accessed by using &lt;code&gt;head()&lt;/code&gt; on the DataFrame.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to change any of the code for plotting the histograms.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,3,&quot;randomNumber&quot;,0.434831787179349,&quot;assignment&quot;,&quot;&lt;p&gt;You have just imported a file from the web, saved it locally and loaded it into a DataFrame. If you just wanted to load a file from the web into a DataFrame without first saving it locally, you can do that easily using &lt;code&gt;pandas&lt;/code&gt;. In particular, you can use the function &lt;code&gt;pd.read_csv()&lt;/code&gt; with the URL as the first argument and the separator &lt;code&gt;sep&lt;/code&gt; as the second argument.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the file, once again, is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nimport matplotlib.pyplot as plt\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n\\\\n# Read file into a DataFrame: df\\\\ndf = pd.read_csv(url, sep=&#39;;&#39;)\\\\n\\\\n# Print the head of the DataFrame\\\\nprint(df.head())\\\\n\\\\n# Plot first column of df\\\\ndf.iloc[:, 0].hist()\\\\nplt.xlabel(&#39;fixed acidity (g(tartaric acid)/dm$^3$)&#39;)\\\\nplt.ylabel(&#39;count&#39;)\\\\nplt.show()\\\\n&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42708]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import package\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Read in all sheets of Excel file: xls\\\\n\\\\n\\\\n# Print the sheetnames to the shell\\\\n\\\\n\\\\n# Print the head of the first sheet (using its name, NOT its index)\\\\n\\\\n&quot;,&quot;sct&quot;,&quot;Ex().has_import(&#39;pandas&#39;)\\\\nEx().check_correct(\\\\n    has_printout(0),\\\\n    multi(\\\\n        check_correct(\\\\n            check_object(&#39;xls&#39;).is_instance(dict),\\\\n            check_correct(\\\\n                check_function(&#39;pandas.read_excel&#39;).multi(\\\\n                    check_args(0).has_equal_value(),\\\\n                    check_args(&#39;sheet_name&#39;).has_equal_value()\\\\n                ),\\\\n                check_object(&#39;url&#39;).has_equal_value()\\\\n            )\\\\n        )\\\\n    )\\\\n)\\\\nEx().has_printout(1)\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Read the file in &lt;code&gt;url&lt;/code&gt; into a dictionary &lt;code&gt;xls&lt;/code&gt; using &lt;code&gt;pd.read_excel()&lt;/code&gt; recalling that, in order to import all sheets you need to pass &lt;code&gt;None&lt;/code&gt; to the argument &lt;code&gt;sheet_name&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the names of the sheets in the Excel spreadsheet; these will be the keys of the dictionary &lt;code&gt;xls&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the head of the first sheet &lt;em&gt;using the sheet name, not the index of the sheet&lt;/em&gt;! The sheet name is &lt;code&gt;&#39;1700&#39;&lt;/code&gt;&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42709,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Make sure you typed in the URL correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and &lt;code&gt;sheet_name&lt;/code&gt; with its corresponding value as the second argument to &lt;code&gt;pd.read_excel()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The &lt;em&gt;keys&lt;/em&gt; of a dictionary can be accessed by using &lt;code&gt;keys()&lt;/code&gt; on the dictionary.&lt;/li&gt;\\\\n&lt;li&gt;You can access a sheet using the format: &lt;em&gt;dictionary&lt;/em&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;em&gt;sheet name or index&lt;/em&gt;&lt;strong&gt;]&lt;/strong&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,4,&quot;randomNumber&quot;,0.36014135490951316,&quot;assignment&quot;,&quot;&lt;p&gt;Congrats! You&#39;ve just loaded a flat file from the web into a DataFrame without first saving it locally using the &lt;code&gt;pandas&lt;/code&gt; function &lt;code&gt;pd.read_csv()&lt;/code&gt;. This function is super cool because it has close relatives that allow you to load all types of files, not only flat ones. In this interactive exercise, you&#39;ll use &lt;code&gt;pd.read_excel()&lt;/code&gt; to import an Excel spreadsheet.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the spreadsheet is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/course/importing_data_into_r/latitude.xls&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;\\\\n&lt;p&gt;Your job is to use &lt;code&gt;pd.read_excel()&lt;/code&gt; to read in all of its sheets, print the sheet names and then print the head of the first sheet &lt;em&gt;using its name, not its index&lt;/em&gt;.&lt;/p&gt;\\\\n&lt;p&gt;Note that the output of &lt;code&gt;pd.read_excel()&lt;/code&gt; is a Python dictionary with sheet names as keys and corresponding DataFrames as corresponding values.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Importing non-flat files from the web&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import package\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/course/importing_data_into_r/latitude.xls&#39;\\\\n\\\\n# Read in all sheets of Excel file: xls\\\\nxls = pd.read_excel(url, sheet_name=None)\\\\n\\\\n# Print the sheetnames to the shell\\\\nprint(xls.keys())\\\\n\\\\n# Print the head of the first sheet (using its name, NOT its index)\\\\nprint(xls[&#39;1700&#39;].head())&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42709]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;aspect_ratio&quot;,56.25,&quot;instructions&quot;,null,&quot;externalId&quot;,990669,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,null,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;runtime_config&quot;,null,&quot;number&quot;,5,&quot;video_hls&quot;,null,&quot;randomNumber&quot;,0.23837865069322195,&quot;chapter_id&quot;,4135,&quot;assignment&quot;,null,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;VideoExercise&quot;,&quot;id&quot;,990669,&quot;projector_key&quot;,&quot;course_1606_9d15ae176be1800b996f7869a82b8087&quot;,&quot;video_link&quot;,null,&quot;key&quot;,&quot;e480d1fdcf&quot;,&quot;course_id&quot;,1606]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\n\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request: request\\\\n\\\\n\\\\n# Sends the request and catches the response: response\\\\n\\\\n\\\\n# Print the datatype of response\\\\nprint(type(response))\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()\\\\n&quot;,&quot;sct&quot;,&quot;\\\\n# Test: import urlopen, Request\\\\nimport_msg = \\\\&quot;Did you correctly import the required packages?\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.urlopen\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.Request\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\n\\\\n# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().check_object(\\\\&quot;url\\\\&quot;, missing_msg=predef_msg).has_equal_value(incorrect_msg = predef_msg)\\\\n\\\\n# Test: call to Request() and &#39;request&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.Request\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;request\\\\&quot;)\\\\n  \\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.urlopen\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;response\\\\&quot;),\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(0)\\\\nEx().check_function(\\\\&quot;response.close\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the functions &lt;code&gt;urlopen&lt;/code&gt; and &lt;code&gt;Request&lt;/code&gt; from the subpackage &lt;code&gt;urllib.request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the url &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt; using the function &lt;code&gt;Request()&lt;/code&gt; and assign it to &lt;code&gt;request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Send the request and catch the response in the variable &lt;code&gt;response&lt;/code&gt; with  the function &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Run the rest of the code to see the datatype of &lt;code&gt;response&lt;/code&gt; and to close the connection!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42711,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import two functions in one line, import the first function as usual and add a comma &lt;code&gt;,&lt;/code&gt; followed by the second function.&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (already in the &lt;code&gt;url&lt;/code&gt; object defined) as an argument to &lt;code&gt;Request()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Pass &lt;code&gt;request&lt;/code&gt; as an argument to &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for printing the datatype of &lt;code&gt;response&lt;/code&gt; and closing the connection.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,6,&quot;randomNumber&quot;,0.9835848337831758,&quot;assignment&quot;,&quot;&lt;p&gt;Now that you know the basics behind HTTP GET requests, it&#39;s time to perform some of your own. In this interactive exercise, you will ping our very own DataCamp servers to perform a GET request to extract information from the first coding exercise of this course, &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt;.&lt;/p&gt;\\\\n&lt;p&gt;In the next exercise, you&#39;ll extract the HTML itself. Right now, however, you are going to package and send the request and then catch the response.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request: request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\nresponse = urlopen(request)\\\\n\\\\n# Print the datatype of response\\\\nprint(type(response))\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()\\\\n&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42711]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\n\\\\n\\\\n# Extract the response: html\\\\n\\\\n\\\\n# Print the html\\\\n\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()&quot;,&quot;sct&quot;,&quot;\\\\n# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.urlopen\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.Request\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to Request() and &#39;request&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.Request\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;request\\\\&quot;)\\\\n\\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.urlopen\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;response\\\\&quot;)\\\\n\\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;response.read\\\\&quot;)\\\\nEx().check_object(\\\\&quot;html\\\\&quot;)\\\\n\\\\n# Test: call to print()\\\\nEx().check_function(&#39;print&#39;).check_args(0).has_equal_ast()\\\\n\\\\n# Test: Predefined code\\\\nEx().check_function(\\\\&quot;response.close\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Send the request and catch the response in the variable &lt;code&gt;response&lt;/code&gt; with the function &lt;code&gt;urlopen()&lt;/code&gt;, as in the previous exercise.&lt;/li&gt;\\\\n&lt;li&gt;Extract the response using the &lt;code&gt;read()&lt;/code&gt; method and store the result in the variable &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the string &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to perform all of the above and to close the response: be tidy!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42712,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass &lt;code&gt;request&lt;/code&gt; as an argument to &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Apply the method &lt;code&gt;read()&lt;/code&gt; to the response object &lt;code&gt;response&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Simply pass &lt;code&gt;html&lt;/code&gt; to the &lt;code&gt;print()&lt;/code&gt; function.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for closing the response.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,7,&quot;randomNumber&quot;,0.7388926129245199,&quot;assignment&quot;,&quot;&lt;p&gt;You have just packaged and sent a GET request to &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt; and then caught the response. You saw that such a response is a &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; object. The question remains: what can you do with this response?&lt;/p&gt;\\\\n&lt;p&gt;Well, as it came from an HTML page, you could &lt;em&gt;read&lt;/em&gt; it to extract the HTML and, in fact, such a &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; object has an associated &lt;code&gt;read()&lt;/code&gt; method. In this exercise, you&#39;ll build on your previous great work to extract the response and print the HTML.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\nresponse = urlopen(request)\\\\n\\\\n# Extract the response: html\\\\nhtml = response.read()\\\\n\\\\n# Print the html\\\\nprint(html)\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42712]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import package\\\\n\\\\n\\\\n# Specify the url: url\\\\n\\\\n\\\\n# Packages the request, send the request and catch the response: r\\\\n\\\\n\\\\n# Extract the response: text\\\\n\\\\n\\\\n# Print the html\\\\nprint(text)&quot;,&quot;sct&quot;,&quot;\\\\n# Test: import requests\\\\nEx().has_import(\\\\&quot;requests\\\\&quot;)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n# Test: &#39;text&#39; variable\\\\nEx().has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `text`?\\\\&quot;)\\\\nEx().check_object(\\\\&quot;text\\\\&quot;)\\\\n\\\\n# Test: Predefined code\\\\nEx().check_function(&#39;print&#39;).check_args(0).has_equal_ast()\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the package &lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of interest to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the URL, send the request and catch the response with a single function &lt;code&gt;requests.get()&lt;/code&gt;, assigning the response to the variable &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; to return the HTML of the webpage as a string; store the result in a variable &lt;code&gt;text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print the HTML of the webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42713,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a package &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;import x&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Did you type in the URL correctly?&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as an argument to &lt;code&gt;requests.get()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; by executing &lt;code&gt;r.text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for printing the HTML of the webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,8,&quot;randomNumber&quot;,0.8271309832832663,&quot;assignment&quot;,&quot;&lt;p&gt;Now that you&#39;ve got your head and hands around making HTTP requests using the urllib package, you&#39;re going to figure out how to do the same using the higher-level requests library. You&#39;ll once again be pinging DataCamp servers for their &lt;code&gt;\\\\&quot;http://www.datacamp.com/teach/documentation\\\\&quot;&lt;/code&gt; page.&lt;/p&gt;\\\\n&lt;p&gt;Note that unlike in the previous exercises using urllib, you don&#39;t have to close the connection when using requests!&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import package\\\\nimport requests\\\\n\\\\n# Specify the url: url\\\\nurl = \\\\&quot;http://www.datacamp.com/teach/documentation\\\\&quot;\\\\n\\\\n# Packages the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response: text\\\\ntext = r.text\\\\n\\\\n# Print the html\\\\nprint(text)&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42713]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;aspect_ratio&quot;,56.25,&quot;instructions&quot;,null,&quot;externalId&quot;,990670,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,null,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;runtime_config&quot;,null,&quot;number&quot;,9,&quot;video_hls&quot;,null,&quot;randomNumber&quot;,0.28565539778772764,&quot;chapter_id&quot;,4135,&quot;assignment&quot;,null,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;Scraping the web in Python&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;VideoExercise&quot;,&quot;id&quot;,990670,&quot;projector_key&quot;,&quot;course_1606_9d1f8a331d1200c7e1bdbfcaf3a7a491&quot;,&quot;video_link&quot;,null,&quot;key&quot;,&quot;da43858012&quot;,&quot;course_id&quot;,1606]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom ____ import ____\\\\n\\\\n# Specify url: url\\\\n\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\n\\\\n\\\\n# Extracts the response as html: html_doc\\\\n\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\n\\\\n\\\\n# Prettify the BeautifulSoup object: pretty_soup\\\\n\\\\n\\\\n# Print the response\\\\nprint(pretty_soup)&quot;,&quot;sct&quot;,&quot;# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;requests\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: import BeautifulSoup\\\\nimport_msg = \\\\&quot;Did you correctly import the required packages?\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;bs4.BeautifulSoup\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n\\\\n# Test: &#39;html_doc&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `html_doc`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to BeautifulSoup() and &#39;soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;bs4.BeautifulSoup\\\\&quot;).check_args(0).has_equal_value()\\\\n  )\\\\n\\\\n# Test: call to prettify() and &#39;pretty_soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;pretty_soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;soup.prettify\\\\&quot;)\\\\n  )\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(0)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the function &lt;code&gt;BeautifulSoup&lt;/code&gt; from the package &lt;code&gt;bs4&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of interest to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the URL, send the request and catch the response with a single function &lt;code&gt;requests.get()&lt;/code&gt;, assigning the response to the variable &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; to return the HTML of the webpage as a string; store the result in a variable &lt;code&gt;html_doc&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Create a BeautifulSoup object &lt;code&gt;soup&lt;/code&gt; from the resulting HTML using the function &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;prettify()&lt;/code&gt; on &lt;code&gt;soup&lt;/code&gt; and assign the result to &lt;code&gt;pretty_soup&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print to prettified HTML to your shell!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42715,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a function &lt;code&gt;y&lt;/code&gt; from a package &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;from x import y&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Check the URL to make sure that you typed it in correctly.&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as an argument to &lt;code&gt;requests.get()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; by executing &lt;code&gt;r.text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Pass the extracted &lt;em&gt;HTML&lt;/em&gt; as an argument to &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;To use the &lt;code&gt;prettify()&lt;/code&gt; method on the BeautifulSoup object &lt;code&gt;soup&lt;/code&gt;, execute &lt;code&gt;soup.prettify()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code to print the prettified HTML.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,10,&quot;randomNumber&quot;,0.36782726865167836,&quot;assignment&quot;,&quot;&lt;p&gt;In this interactive exercise, you&#39;ll learn how to use the BeautifulSoup package to &lt;em&gt;parse&lt;/em&gt;, &lt;em&gt;prettify&lt;/em&gt; and &lt;em&gt;extract&lt;/em&gt; information from HTML. You&#39;ll scrape the data from the webpage of Guido van Rossum, Python&#39;s very own &lt;a href=\\\\&quot;https://en.wikipedia.org/wiki/Benevolent_dictator_for_life\\\\&quot;&gt;Benevolent Dictator for Life&lt;/a&gt;. In the following exercises, you&#39;ll prettify the HTML and then extract the text and the hyperlinks.&lt;/p&gt;\\\\n&lt;p&gt;The URL of interest is &lt;code&gt;url = &#39;https://www.python.org/~guido/&#39;&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Prettify the BeautifulSoup object: pretty_soup\\\\npretty_soup = soup.prettify()\\\\n\\\\n# Print the response\\\\nprint(pretty_soup)&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42715]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\n\\\\n\\\\n# Get the title of Guido&#39;s webpage: guido_title\\\\n\\\\n\\\\n# Print the title of Guido&#39;s webpage to the shell\\\\n\\\\n\\\\n# Get Guido&#39;s text: guido_text\\\\n\\\\n\\\\n# Print Guido&#39;s text to the shell\\\\nprint(guido_text)&quot;,&quot;sct&quot;,&quot;# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;requests\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: import BeautifulSoup\\\\nEx().has_import(\\\\n    \\\\&quot;bs4.BeautifulSoup\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n\\\\n# Test: &#39;html_doc&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `html_doc`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to BeautifulSoup() and &#39;soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;bs4.BeautifulSoup\\\\&quot;).check_args(0).has_equal_value()\\\\n  )\\\\n\\\\n# Test: &#39;guido_title&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;guido_title\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;soup.title\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `soup.title` to create `guido_title`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to print()\\\\nEx().has_printout(0)\\\\n\\\\n# Test: call to soup.get_text() and &#39;guido_text&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;guido_text\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;soup.get_text\\\\&quot;)\\\\n  )\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(1)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;In the sample code, the HTML response object &lt;code&gt;html_doc&lt;/code&gt; has already been created: your first task is to Soupify it using the function &lt;code&gt;BeautifulSoup()&lt;/code&gt; and to assign the resulting soup to the variable &lt;code&gt;soup&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Extract the title from the HTML soup &lt;code&gt;soup&lt;/code&gt; using the attribute &lt;code&gt;title&lt;/code&gt; and assign the result to &lt;code&gt;guido_title&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the title of Guido&#39;s webpage to the shell using the &lt;code&gt;print()&lt;/code&gt; function.&lt;/li&gt;\\\\n&lt;li&gt;Extract the text from the HTML soup &lt;code&gt;soup&lt;/code&gt; using the method &lt;code&gt;get_text()&lt;/code&gt; and assign to &lt;code&gt;guido_text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print the text from Guido&#39;s webpage to the shell.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42716,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;HTML response object&lt;/em&gt; as an argument to &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;title&lt;/code&gt; attribute of the object &lt;code&gt;soup&lt;/code&gt; by executing &lt;code&gt;soup.title&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The object that contains the title of Guido&#39;s webpage is &lt;code&gt;guido_title&lt;/code&gt;; pass this as an argument to &lt;code&gt;print()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;get_text()&lt;/code&gt; on the HTML soup &lt;code&gt;soup&lt;/code&gt; by executing &lt;code&gt;soup.get_text()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code to print the text from Guido&#39;s webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,11,&quot;randomNumber&quot;,0.9339294396862643,&quot;assignment&quot;,&quot;&lt;p&gt;As promised, in the following exercises, you&#39;ll learn the basics of extracting information from HTML soup. In this exercise, you&#39;ll figure out how to extract the text from the BDFL&#39;s webpage, along with printing the webpage&#39;s title.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Get the title of Guido&#39;s webpage: guido_title\\\\nguido_title = soup.title\\\\n\\\\n# Print the title of Guido&#39;s webpage to the shell\\\\nprint(guido_title)\\\\n\\\\n# Get Guido&#39;s text: guido_text\\\\nguido_text = soup.get_text()\\\\n\\\\n# Print Guido&#39;s text to the shell\\\\nprint(guido_text)&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42716]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Print the title of Guido&#39;s webpage\\\\nprint(soup.title)\\\\n\\\\n# Find all &#39;a&#39; tags (which define hyperlinks): a_tags\\\\n\\\\n\\\\n# Print the URLs to the shell\\\\nfor ____ in ____:\\\\n    ____&quot;,&quot;sct&quot;,&quot;predef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\&quot;requests\\\\&quot;)\\\\nEx().has_import(\\\\&quot;bs4.BeautifulSoup\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().has_printout(0)\\\\n\\\\nEx().check_correct(\\\\n    check_object(\\\\&quot;a_tags\\\\&quot;),\\\\n    check_function(\\\\&quot;soup.find_all\\\\&quot;).check_args(0).has_equal_value()\\\\n)\\\\nEx().check_for_loop().multi(\\\\n        check_iter().has_equal_value(incorrect_msg = \\\\&quot;You have to iterate over `a_tags`\\\\&quot;),\\\\n        check_body().set_context(&#39;&lt;a href=\\\\&quot;pics.html\\\\&quot;&gt;&lt;img border=\\\\&quot;0\\\\&quot; src=\\\\&quot;images/IMG_2192.jpg\\\\&quot;/&gt;&lt;/a&gt;&#39;).check_function(\\\\&quot;print\\\\&quot;).check_args(0).check_function(\\\\&quot;link.get\\\\&quot;).check_args(0).has_equal_value()\\\\n    )\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;find_all()&lt;/code&gt; to find all hyperlinks in &lt;code&gt;soup&lt;/code&gt;, remembering that hyperlinks are defined by the HTML tag &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; but passed to &lt;code&gt;find_all()&lt;/code&gt; without angle brackets; store the result in the variable &lt;code&gt;a_tags&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The variable &lt;code&gt;a_tags&lt;/code&gt; is a results set: your job now is to enumerate over it, using a &lt;code&gt;for&lt;/code&gt; loop and to print the actual URLs of the hyperlinks; to do this, for every element &lt;code&gt;link&lt;/code&gt; in &lt;code&gt;a_tags&lt;/code&gt;, you want to &lt;code&gt;print()&lt;/code&gt; &lt;code&gt;link.get(&#39;href&#39;)&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,42717,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;HTML tag&lt;/em&gt; to find (without the angle brackets &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) as a string argument to &lt;code&gt;find_all()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Recall that the &lt;code&gt;for&lt;/code&gt; loop recipe is: &lt;code&gt;for&lt;/code&gt; &lt;em&gt;loop variable&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;results set&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;. Don&#39;t forget to pass &lt;code&gt;link.get(&#39;href&#39;)&lt;/code&gt; as an argument to &lt;code&gt;print()&lt;/code&gt; inside the &lt;code&gt;for&lt;/code&gt; loop body.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,12,&quot;randomNumber&quot;,0.7373867099980398,&quot;assignment&quot;,&quot;&lt;p&gt;In this exercise, you&#39;ll figure out how to extract the URLs of the hyperlinks from the BDFL&#39;s webpage. In the process, you&#39;ll become close friends with the soup method &lt;code&gt;find_all()&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Print the title of Guido&#39;s webpage\\\\nprint(soup.title)\\\\n\\\\n# Find all &#39;a&#39; tags (which define hyperlinks): a_tags\\\\na_tags = soup.find_all(&#39;a&#39;)\\\\n\\\\n# Print the URLs to the shell\\\\nfor link in a_tags:\\\\n    print(link.get(&#39;href&#39;))&quot;,&quot;type&quot;,&quot;NormalExercise&quot;,&quot;id&quot;,42717]]]],&quot;canRateChapter&quot;,false,&quot;isChapterCompleted&quot;,false]],&quot;learningMode&quot;,&quot;course&quot;,&quot;location&quot;,[&quot;^2&quot;,[&quot;current&quot;,[&quot;^2&quot;,[&quot;pathname&quot;,&quot;/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1&quot;,&quot;query&quot;,[&quot;^2&quot;,[&quot;ex&quot;,&quot;2&quot;]]]],&quot;canonical&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2&quot;,&quot;before&quot;,[&quot;^2&quot;,[&quot;pathname&quot;,&quot;/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1&quot;,&quot;query&quot;,[&quot;^2&quot;,[&quot;ex&quot;,&quot;2&quot;]]]]]],&quot;mobilePopup&quot;,[&quot;^2&quot;,[]],&quot;onboardingMilestones&quot;,[&quot;^ &quot;,&quot;isStarted&quot;,false,&quot;isActive&quot;,true,&quot;step&quot;,0],&quot;notes&quot;,[&quot;^ &quot;,&quot;workspaceNotes&quot;,null,&quot;workspaceTemplate&quot;,[&quot;^ &quot;,&quot;_tag&quot;,&quot;template&quot;,&quot;id&quot;,3046,&quot;createdAt&quot;,&quot;2022-12-01T15:10:45.124Z&quot;,&quot;updatedAt&quot;,&quot;2022-12-05T06:31:46.338Z&quot;,&quot;key&quot;,&quot;course-dataset-intermediate-importing-data-in-python&quot;,&quot;language&quot;,&quot;Python&quot;,&quot;title&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;description&quot;,&quot;Explore the datasets from the course, Intermediate Importing Data in Python.&quot;,&quot;listed&quot;,false,&quot;latestVersion&quot;,&quot;d9783ad9a9e677a4f583a5bd9ed5b9d5987a2859&quot;,&quot;communitySlug&quot;,null,&quot;category&quot;,null,&quot;templateGroupKey&quot;,null,&quot;previewPublicationId&quot;,&quot;ade0176d-8e1d-436c-b7c1-44c3f4f1df8f&quot;,&quot;labels&quot;,[&quot;course-dataset&quot;],&quot;courseId&quot;,1606,&quot;integrationIds&quot;,[],&quot;publicationScreenshot&quot;,null]],&quot;output&quot;,[&quot;^ &quot;,&quot;lastErrorMessage&quot;,null,&quot;^W&quot;,[]],&quot;preFetchedData&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedDataStateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^;&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;status&quot;,&quot;SUCCESS&quot;,&quot;data&quot;,[&quot;^ &quot;,&quot;id&quot;,1606,&quot;^K&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;^L&quot;,&quot;As a data scientist, you will need to clean data, wrangle and munge it, visualize it, build predictive models and interpret these models. Before you can do so, however, you will need to know how to get data into Python. In the prequel to this course, you learned many ways to import data into Python: from flat files such as .txt and .csv; from files native to other software such as Excel spreadsheets, Stata, SAS, and MATLAB files; and from relational databases such as SQLite and PostgreSQL. In this course, you&#39;ll extend this knowledge base by learning to import data from the web and by pulling data from Application Programming Interfaces\xe2\x80\x94 APIs\xe2\x80\x94such as the Twitter streaming API, which allows us to stream real-time tweets.&quot;,&quot;short_description&quot;,&quot;Improve your Python data importing skills and learn to work with web and API data.&quot;,&quot;author_field&quot;,null,&quot;author_bio&quot;,null,&quot;author_image&quot;,&quot;https://assets.datacamp.com/production/course_1606/author_images/author_image_course_1606_20200310-1-lgdj4c?1583853939&quot;,&quot;nb_of_subscriptions&quot;,156211,&quot;slug&quot;,&quot;intermediate-importing-data-in-python&quot;,&quot;image_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/thumb/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;image_thumbnail_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/thumb_home/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;last_updated_on&quot;,&quot;01/08/2023&quot;,&quot;link&quot;,&quot;https://www.datacamp.com/courses/intermediate-importing-data-in-python&quot;,&quot;should_cache&quot;,true,&quot;^9&quot;,&quot;datacamp&quot;,&quot;difficulty_level&quot;,1,&quot;state&quot;,&quot;live&quot;,&quot;university&quot;,null,&quot;sharing_links&quot;,[&quot;^ &quot;,&quot;twitter&quot;,&quot;http://bit.ly/1eWTMJh&quot;,&quot;facebook&quot;,&quot;http://bit.ly/1iS42Do&quot;],&quot;marketing_video&quot;,&quot;&quot;,&quot;programming_language&quot;,&quot;python&quot;,&quot;paid&quot;,true,&quot;time_needed&quot;,null,&quot;xp&quot;,2300,&quot;topic_id&quot;,8,&quot;technology_id&quot;,2,&quot;reduced_outline&quot;,null,&quot;runtime_config&quot;,null,&quot;lti_only&quot;,false,&quot;instructors&quot;,[[&quot;^ &quot;,&quot;id&quot;,301837,&quot;marketing_biography&quot;,&quot;Data Scientist at DataCamp&quot;,&quot;biography&quot;,&quot;Hugo is a data scientist, educator, writer and podcaster formerly at DataCamp. His main interests are promoting data &amp; AI literacy, helping to spread data skills through organizations and society and doing amateur stand up comedy in NYC. If you want to know what he likes to talk about, definitely check out &lt;a href=\\\\&quot;https://www.datacamp.com/community/podcast\\\\&quot;&gt;DataFramed&lt;/a&gt;, the DataCamp podcast, which he hosted and produced.&quot;,&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/301/837/square/hugoaboutpic.jpg?1493154678&quot;,&quot;full_name&quot;,&quot;Hugo Bowne-Anderson&quot;,&quot;instructor_path&quot;,&quot;/instructors/hugobowne&quot;]],&quot;collaborators&quot;,[[&quot;^ &quot;,&quot;^1M&quot;,&quot;https://assets.datacamp.com/users/avatars/000/382/294/square/francis-photo.jpg?1471980001&quot;,&quot;^1N&quot;,&quot;Francisco Castro&quot;]],&quot;datasets&quot;,[[&quot;^ &quot;,&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/b422ace2fceada7b569e0ba3e8d833fddc684c4d/latitude.xls&quot;,&quot;name&quot;,&quot;Latitudes (XLS)&quot;],[&quot;^ &quot;,&quot;^1R&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/3ef452f83a91556ea4284624b969392c0506fb33/tweets3.txt&quot;,&quot;^1S&quot;,&quot;Tweets&quot;],[&quot;^ &quot;,&quot;^1R&quot;,&quot;https://assets.datacamp.com/production/repositories/488/datasets/013936d2700e2d00207ec42100d448c23692eb6f/winequality-red.csv&quot;,&quot;^1S&quot;,&quot;Red wine quality&quot;]],&quot;tracks&quot;,[[&quot;^ &quot;,&quot;path&quot;,&quot;/tracks/data-engineer&quot;,&quot;title_with_subtitle&quot;,&quot;Data Engineer&quot;],[&quot;^ &quot;,&quot;^1U&quot;,&quot;/tracks/data-scientist-professional-with-python&quot;,&quot;^1V&quot;,&quot;Data Scientist Professional with Python&quot;],[&quot;^ &quot;,&quot;^1U&quot;,&quot;/tracks/importing-cleaning-data-with-python&quot;,&quot;^1V&quot;,&quot;Importing &amp; Cleaning Data  with Python&quot;]],&quot;prerequisites&quot;,[[&quot;^ &quot;,&quot;^1U&quot;,&quot;/courses/introduction-to-importing-data-in-python&quot;,&quot;^K&quot;,&quot;Introduction to Importing Data in Python&quot;]],&quot;time_needed_in_hours&quot;,2,&quot;seo_title&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;seo_description&quot;,&quot;Learn how to import data into Python from sources like the web and by pulling data from APIs, such as the Twitter streaming API to stream real-time tweets.&quot;,&quot;archived_at&quot;,null,&quot;original_image_url&quot;,&quot;https://assets.datacamp.com/production/course_1606/shields/original/shield_image_course_1606_20200310-1-17hkmhz?1583853940&quot;,&quot;external_slug&quot;,&quot;intermediate-importing-data-in-python&quot;,&quot;mobile_enabled&quot;,true,&quot;case_study&quot;,null,&quot;difficulty_level_hardcoded&quot;,null,&quot;long_description&quot;,null,&quot;chapters&quot;,[[&quot;^ &quot;,&quot;id&quot;,4135,&quot;title_meta&quot;,null,&quot;^K&quot;,&quot;Importing data from the Internet&quot;,&quot;^L&quot;,&quot;The web is a rich source of data from which you can extract various types of insights and findings. In this chapter, you will learn how to get data from the web, whether it is stored in files or in HTML. You&#39;ll also learn the basics of scraping and parsing web data.&quot;,&quot;number&quot;,1,&quot;^15&quot;,&quot;importing-data-from-the-internet-1&quot;,&quot;nb_exercises&quot;,12,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^18&quot;,&quot;11/08/2022&quot;,&quot;slides_link&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter1.pdf&quot;,&quot;free_preview&quot;,true,&quot;xp&quot;,1050,&quot;number_of_videos&quot;,3,&quot;^&lt;&quot;,[[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Importing flat files from the web&quot;,&quot;aggregate_xp&quot;,50,&quot;^28&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=1&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=3&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Importing non-flat files from the web&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=4&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=5&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=6&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=7&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=8&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Scraping the web in Python&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=9&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=10&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=11&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=12&quot;]]],[&quot;^ &quot;,&quot;id&quot;,4136,&quot;^27&quot;,null,&quot;^K&quot;,&quot;Interacting with APIs to import data from the web&quot;,&quot;^L&quot;,&quot;In this chapter, you will gain a deeper understanding of how to import data from the web. You will learn the basics of extracting data from APIs, gain insight on the importance of APIs, and practice extracting data by diving into the OMDB and Library of Congress APIs.&quot;,&quot;^28&quot;,2,&quot;^15&quot;,&quot;interacting-with-apis-to-import-data-from-the-web-2&quot;,&quot;^29&quot;,9,&quot;^2:&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^2;&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^18&quot;,&quot;11/08/2022&quot;,&quot;^2&lt;&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter2.pdf&quot;,&quot;^2=&quot;,null,&quot;xp&quot;,650,&quot;^2&gt;&quot;,2,&quot;^&lt;&quot;,[[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Introduction to APIs and JSONs&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=1&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^K&quot;,&quot;Pop quiz: What exactly is a JSON?&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=2&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Loading and exploring a JSON&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=3&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;MultipleChoiceExercise&quot;,&quot;^K&quot;,&quot;Pop quiz: Exploring your JSON&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=4&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;APIs and interacting with the world wide web&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=5&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^K&quot;,&quot;Pop quiz: What&#39;s an API?&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=6&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;API requests&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=7&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;JSON\xe2\x80\x93from the web to Python&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=8&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Checking out the Wikipedia API&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/interacting-with-apis-to-import-data-from-the-web-2?ex=9&quot;]]],[&quot;^ &quot;,&quot;id&quot;,4140,&quot;^27&quot;,null,&quot;^K&quot;,&quot;Diving  deep into the Twitter API&quot;,&quot;^L&quot;,&quot;In this chapter, you will consolidate your knowledge of interacting with APIs in a deep dive into the Twitter streaming API. You&#39;ll learn how to stream real-time Twitter data, and how to analyze and visualize it.&quot;,&quot;^28&quot;,3,&quot;^15&quot;,&quot;diving-deep-into-the-twitter-api&quot;,&quot;^29&quot;,7,&quot;^2:&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^2;&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^18&quot;,&quot;11/08/2022&quot;,&quot;^2&lt;&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter3.pdf&quot;,&quot;^2=&quot;,null,&quot;xp&quot;,600,&quot;^2&gt;&quot;,2,&quot;^&lt;&quot;,[[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;The Twitter API and Authentication&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=1&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Streaming tweets&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=2&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Load and explore your Twitter data&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=3&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Twitter data to DataFrame&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=4&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;A little bit of Twitter text analysis&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=5&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Plotting your Twitter data&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=6&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Final Thoughts&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/diving-deep-into-the-twitter-api?ex=7&quot;]]]]]]]],&quot;^6&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^Z&quot;,&quot;SUCCESS&quot;,&quot;^[&quot;,[&quot;^ &quot;,&quot;id&quot;,4135,&quot;^27&quot;,null,&quot;^K&quot;,&quot;Importing data from the Internet&quot;,&quot;^L&quot;,&quot;The web is a rich source of data from which you can extract various types of insights and findings. In this chapter, you will learn how to get data from the web, whether it is stored in files or in HTML. You&#39;ll also learn the basics of scraping and parsing web data.&quot;,&quot;^28&quot;,1,&quot;^15&quot;,&quot;importing-data-from-the-internet-1&quot;,&quot;^29&quot;,12,&quot;^2:&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^2;&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^18&quot;,&quot;11/08/2022&quot;,&quot;^2&lt;&quot;,&quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/slides/chapter1.pdf&quot;,&quot;^2=&quot;,true,&quot;xp&quot;,1050,&quot;^2&gt;&quot;,3,&quot;^&lt;&quot;,[[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Importing flat files from the web&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=1&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=2&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=3&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Importing non-flat files from the web&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=4&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=5&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=6&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=7&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=8&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^K&quot;,&quot;Scraping the web in Python&quot;,&quot;^2?&quot;,50,&quot;^28&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=9&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=10&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=11&quot;],[&quot;^ &quot;,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;^2?&quot;,100,&quot;^28&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=12&quot;]]]]]],&quot;^&lt;&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^Z&quot;,&quot;SUCCESS&quot;,&quot;^[&quot;,[[&quot;^ &quot;,&quot;id&quot;,990668,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;assignment&quot;,null,&quot;^K&quot;,&quot;Importing flat files from the web&quot;,&quot;sample_code&quot;,&quot;&quot;,&quot;instructions&quot;,null,&quot;^28&quot;,1,&quot;sct&quot;,&quot;&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;hint&quot;,null,&quot;attachments&quot;,null,&quot;xp&quot;,50,&quot;possible_answers&quot;,[],&quot;feedbacks&quot;,[],&quot;question&quot;,&quot;&quot;,&quot;video_link&quot;,null,&quot;video_hls&quot;,null,&quot;aspect_ratio&quot;,56.25,&quot;projector_key&quot;,&quot;course_1606_59604c018a6e132016cd26144a12fee0&quot;,&quot;key&quot;,&quot;e36457c7ed&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;course_id&quot;,1606,&quot;chapter_id&quot;,4135,&quot;^1H&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;randomNumber&quot;,0.5911862297597621,&quot;externalId&quot;,990668],[&quot;^ &quot;,&quot;id&quot;,42707,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;You are about to import your first file from the web! The flat file you will import will be &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; from the University of California, Irvine&#39;s &lt;a href=\\\\&quot;https://archive.ics.uci.edu/ml/index.php\\\\&quot;&gt;Machine Learning repository&lt;/a&gt;. The flat file contains tabular data of physiochemical properties of red wine, such as pH, alcohol content and citric acid content, along with wine quality rating.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the file is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;\\\\n&lt;p&gt;After you import it, you&#39;ll check your working directory to confirm that it is there and then you&#39;ll load it into a &lt;code&gt;pandas&lt;/code&gt; DataFrame.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Importing flat files from the web: your turn!&quot;,&quot;^2A&quot;,&quot;# Import package\\\\nfrom ____ import ____\\\\n\\\\n# Import pandas\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Save file locally\\\\n\\\\n\\\\n# Read file into a DataFrame and print its head\\\\ndf = pd.read_csv(&#39;winequality-red.csv&#39;, sep=&#39;;&#39;)\\\\nprint(df.head())&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the function &lt;code&gt;urlretrieve&lt;/code&gt; from the subpackage &lt;code&gt;urllib.request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the function &lt;code&gt;urlretrieve()&lt;/code&gt; to save the file locally as &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Execute the remaining code to load &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; in a pandas DataFrame and to print its head to the shell.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,2,&quot;sct&quot;,&quot;Ex().has_import(\\\\&quot;urllib.request.urlretrieve\\\\&quot;)\\\\nEx().has_import(\\\\&quot;pandas\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\nEx().check_function(\\\\&quot;urllib.request.urlretrieve\\\\&quot;).multi(\\\\n  check_args(0).has_equal_value(),\\\\n  check_args(1).has_equal_value()\\\\n)\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;df\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;pandas.read_csv\\\\&quot;).multi(\\\\n    check_args(0).has_equal_value(),\\\\n    check_args(1).has_equal_value()\\\\n  )\\\\n)\\\\nEx().has_printout(0)\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import package\\\\nfrom urllib.request import urlretrieve\\\\n\\\\n# Import pandas\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n\\\\n# Save file locally\\\\nurlretrieve(url, &#39;winequality-red.csv&#39;)\\\\n\\\\n# Read file into a DataFrame and print its head\\\\ndf = pd.read_csv(&#39;winequality-red.csv&#39;, sep=&#39;;&#39;)\\\\nprint(df.head())&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a function &lt;code&gt;y&lt;/code&gt; from a subpackage &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;from x import y&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;This one&#39;s a long URL. Make sure you typed it in correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; to import (in the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and the &lt;em&gt;filename&lt;/em&gt; for saving the file locally as the second argument to &lt;code&gt;urlretrieve()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to change the code for loading &lt;code&gt;&#39;winequality-red.csv&#39;&lt;/code&gt; and printing its head.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.5849671004547481,&quot;^2R&quot;,42707],[&quot;^ &quot;,&quot;id&quot;,42708,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;You have just imported a file from the web, saved it locally and loaded it into a DataFrame. If you just wanted to load a file from the web into a DataFrame without first saving it locally, you can do that easily using &lt;code&gt;pandas&lt;/code&gt;. In particular, you can use the function &lt;code&gt;pd.read_csv()&lt;/code&gt; with the URL as the first argument and the separator &lt;code&gt;sep&lt;/code&gt; as the second argument.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the file, once again, is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;&quot;,&quot;^K&quot;,&quot;Opening and reading flat files from the web&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\nimport matplotlib.pyplot as plt\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Read file into a DataFrame: df\\\\n\\\\n\\\\n# Print the head of the DataFrame\\\\nprint(____)\\\\n\\\\n# Plot first column of df\\\\ndf.iloc[:, 0].hist()\\\\nplt.xlabel(&#39;fixed acidity (g(tartaric acid)/dm$^3$)&#39;)\\\\nplt.ylabel(&#39;count&#39;)\\\\nplt.show()\\\\n&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Read file into a DataFrame &lt;code&gt;df&lt;/code&gt; using &lt;code&gt;pd.read_csv()&lt;/code&gt;, recalling that the separator in the file is &lt;code&gt;&#39;;&#39;&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the head of the DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Execute the rest of the code to plot histogram of the first feature in the DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,3,&quot;sct&quot;,&quot;Ex().has_import(\\\\&quot;matplotlib.pyplot\\\\&quot;)\\\\nEx().has_import(\\\\&quot;pandas\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;df\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;pandas.read_csv\\\\&quot;).multi(\\\\n    check_args(0).has_equal_value(),\\\\n    check_args(1).has_equal_value()\\\\n  )\\\\n)\\\\nEx().has_printout(0)\\\\nEx().has_equal_ast(code=\\\\&quot;df.iloc[:, 0].hist\\\\&quot;, incorrect_msg=\\\\&quot;Please do not change the code to plot the histogram.\\\\&quot;)\\\\nEx().check_function(\\\\&quot;matplotlib.pyplot.show\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nimport matplotlib.pyplot as plt\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&#39;\\\\n\\\\n# Read file into a DataFrame: df\\\\ndf = pd.read_csv(url, sep=&#39;;&#39;)\\\\n\\\\n# Print the head of the DataFrame\\\\nprint(df.head())\\\\n\\\\n# Plot first column of df\\\\ndf.iloc[:, 0].hist()\\\\nplt.xlabel(&#39;fixed acidity (g(tartaric acid)/dm$^3$)&#39;)\\\\nplt.ylabel(&#39;count&#39;)\\\\nplt.show()\\\\n&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Make sure you typed the URL correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and the &lt;em&gt;separator&lt;/em&gt; as the second argument to &lt;code&gt;pd.read_csv()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The &lt;em&gt;head&lt;/em&gt; of a DataFrame can be accessed by using &lt;code&gt;head()&lt;/code&gt; on the DataFrame.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to change any of the code for plotting the histograms.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.434831787179349,&quot;^2R&quot;,42708],[&quot;^ &quot;,&quot;id&quot;,42709,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;Congrats! You&#39;ve just loaded a flat file from the web into a DataFrame without first saving it locally using the &lt;code&gt;pandas&lt;/code&gt; function &lt;code&gt;pd.read_csv()&lt;/code&gt;. This function is super cool because it has close relatives that allow you to load all types of files, not only flat ones. In this interactive exercise, you&#39;ll use &lt;code&gt;pd.read_excel()&lt;/code&gt; to import an Excel spreadsheet.&lt;/p&gt;\\\\n&lt;p&gt;The URL of the spreadsheet is&lt;/p&gt;\\\\n&lt;pre&gt;&lt;code&gt;&#39;https://assets.datacamp.com/course/importing_data_into_r/latitude.xls&#39;\\\\n&lt;/code&gt;&lt;/pre&gt;\\\\n&lt;p&gt;Your job is to use &lt;code&gt;pd.read_excel()&lt;/code&gt; to read in all of its sheets, print the sheet names and then print the head of the first sheet &lt;em&gt;using its name, not its index&lt;/em&gt;.&lt;/p&gt;\\\\n&lt;p&gt;Note that the output of &lt;code&gt;pd.read_excel()&lt;/code&gt; is a Python dictionary with sheet names as keys and corresponding DataFrames as corresponding values.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Importing non-flat files from the web&quot;,&quot;^2A&quot;,&quot;# Import package\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\n\\\\n\\\\n# Read in all sheets of Excel file: xls\\\\n\\\\n\\\\n# Print the sheetnames to the shell\\\\n\\\\n\\\\n# Print the head of the first sheet (using its name, NOT its index)\\\\n\\\\n&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Assign the URL of the file to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Read the file in &lt;code&gt;url&lt;/code&gt; into a dictionary &lt;code&gt;xls&lt;/code&gt; using &lt;code&gt;pd.read_excel()&lt;/code&gt; recalling that, in order to import all sheets you need to pass &lt;code&gt;None&lt;/code&gt; to the argument &lt;code&gt;sheet_name&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the names of the sheets in the Excel spreadsheet; these will be the keys of the dictionary &lt;code&gt;xls&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the head of the first sheet &lt;em&gt;using the sheet name, not the index of the sheet&lt;/em&gt;! The sheet name is &lt;code&gt;&#39;1700&#39;&lt;/code&gt;&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,4,&quot;sct&quot;,&quot;Ex().has_import(&#39;pandas&#39;)\\\\nEx().check_correct(\\\\n    has_printout(0),\\\\n    multi(\\\\n        check_correct(\\\\n            check_object(&#39;xls&#39;).is_instance(dict),\\\\n            check_correct(\\\\n                check_function(&#39;pandas.read_excel&#39;).multi(\\\\n                    check_args(0).has_equal_value(),\\\\n                    check_args(&#39;sheet_name&#39;).has_equal_value()\\\\n                ),\\\\n                check_object(&#39;url&#39;).has_equal_value()\\\\n            )\\\\n        )\\\\n    )\\\\n)\\\\nEx().has_printout(1)\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import package\\\\nimport pandas as pd\\\\n\\\\n# Assign url of file: url\\\\nurl = &#39;https://assets.datacamp.com/course/importing_data_into_r/latitude.xls&#39;\\\\n\\\\n# Read in all sheets of Excel file: xls\\\\nxls = pd.read_excel(url, sheet_name=None)\\\\n\\\\n# Print the sheetnames to the shell\\\\nprint(xls.keys())\\\\n\\\\n# Print the head of the first sheet (using its name, NOT its index)\\\\nprint(xls[&#39;1700&#39;].head())&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Make sure you typed in the URL correctly!&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as the first argument and &lt;code&gt;sheet_name&lt;/code&gt; with its corresponding value as the second argument to &lt;code&gt;pd.read_excel()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The &lt;em&gt;keys&lt;/em&gt; of a dictionary can be accessed by using &lt;code&gt;keys()&lt;/code&gt; on the dictionary.&lt;/li&gt;\\\\n&lt;li&gt;You can access a sheet using the format: &lt;em&gt;dictionary&lt;/em&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;em&gt;sheet name or index&lt;/em&gt;&lt;strong&gt;]&lt;/strong&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.36014135490951316,&quot;^2R&quot;,42709],[&quot;^ &quot;,&quot;id&quot;,990669,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^2@&quot;,null,&quot;^K&quot;,&quot;HTTP requests to import files from the web&quot;,&quot;^2A&quot;,&quot;&quot;,&quot;^2B&quot;,null,&quot;^28&quot;,5,&quot;sct&quot;,&quot;&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;&quot;,&quot;^2E&quot;,null,&quot;^2F&quot;,null,&quot;xp&quot;,50,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^2J&quot;,null,&quot;^2K&quot;,null,&quot;^2L&quot;,56.25,&quot;^2M&quot;,&quot;course_1606_9d15ae176be1800b996f7869a82b8087&quot;,&quot;key&quot;,&quot;e480d1fdcf&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2N&quot;,1606,&quot;^2O&quot;,4135,&quot;^1H&quot;,null,&quot;^2P&quot;,&quot;v0&quot;,&quot;^2Q&quot;,0.23837865069322195,&quot;^2R&quot;,990669],[&quot;^ &quot;,&quot;id&quot;,42711,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;Now that you know the basics behind HTTP GET requests, it&#39;s time to perform some of your own. In this interactive exercise, you will ping our very own DataCamp servers to perform a GET request to extract information from the first coding exercise of this course, &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt;.&lt;/p&gt;\\\\n&lt;p&gt;In the next exercise, you&#39;ll extract the HTML itself. Right now, however, you are going to package and send the request and then catch the response.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using urllib&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\n\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request: request\\\\n\\\\n\\\\n# Sends the request and catches the response: response\\\\n\\\\n\\\\n# Print the datatype of response\\\\nprint(type(response))\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()\\\\n&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the functions &lt;code&gt;urlopen&lt;/code&gt; and &lt;code&gt;Request&lt;/code&gt; from the subpackage &lt;code&gt;urllib.request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the url &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt; using the function &lt;code&gt;Request()&lt;/code&gt; and assign it to &lt;code&gt;request&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Send the request and catch the response in the variable &lt;code&gt;response&lt;/code&gt; with  the function &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Run the rest of the code to see the datatype of &lt;code&gt;response&lt;/code&gt; and to close the connection!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,6,&quot;sct&quot;,&quot;\\\\n# Test: import urlopen, Request\\\\nimport_msg = \\\\&quot;Did you correctly import the required packages?\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.urlopen\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.Request\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\n\\\\n# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().check_object(\\\\&quot;url\\\\&quot;, missing_msg=predef_msg).has_equal_value(incorrect_msg = predef_msg)\\\\n\\\\n# Test: call to Request() and &#39;request&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.Request\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;request\\\\&quot;)\\\\n  \\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.urlopen\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;response\\\\&quot;),\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(0)\\\\nEx().check_function(\\\\&quot;response.close\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request: request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\nresponse = urlopen(request)\\\\n\\\\n# Print the datatype of response\\\\nprint(type(response))\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()\\\\n&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import two functions in one line, import the first function as usual and add a comma &lt;code&gt;,&lt;/code&gt; followed by the second function.&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (already in the &lt;code&gt;url&lt;/code&gt; object defined) as an argument to &lt;code&gt;Request()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Pass &lt;code&gt;request&lt;/code&gt; as an argument to &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for printing the datatype of &lt;code&gt;response&lt;/code&gt; and closing the connection.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.9835848337831758,&quot;^2R&quot;,42711],[&quot;^ &quot;,&quot;id&quot;,42712,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;You have just packaged and sent a GET request to &lt;code&gt;\\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;&lt;/code&gt; and then caught the response. You saw that such a response is a &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; object. The question remains: what can you do with this response?&lt;/p&gt;\\\\n&lt;p&gt;Well, as it came from an HTML page, you could &lt;em&gt;read&lt;/em&gt; it to extract the HTML and, in fact, such a &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; object has an associated &lt;code&gt;read()&lt;/code&gt; method. In this exercise, you&#39;ll build on your previous great work to extract the response and print the HTML.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Printing HTTP request results in Python using urllib&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\n\\\\n\\\\n# Extract the response: html\\\\n\\\\n\\\\n# Print the html\\\\n\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Send the request and catch the response in the variable &lt;code&gt;response&lt;/code&gt; with the function &lt;code&gt;urlopen()&lt;/code&gt;, as in the previous exercise.&lt;/li&gt;\\\\n&lt;li&gt;Extract the response using the &lt;code&gt;read()&lt;/code&gt; method and store the result in the variable &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the string &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to perform all of the above and to close the response: be tidy!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,7,&quot;sct&quot;,&quot;\\\\n# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.urlopen\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\nEx().has_import(\\\\n    \\\\&quot;urllib.request.Request\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to Request() and &#39;request&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.Request\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;request\\\\&quot;)\\\\n\\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;urllib.request.urlopen\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;response\\\\&quot;)\\\\n\\\\n# Test: call to urlopen() and &#39;response&#39; variable\\\\nEx().check_function(\\\\&quot;response.read\\\\&quot;)\\\\nEx().check_object(\\\\&quot;html\\\\&quot;)\\\\n\\\\n# Test: call to print()\\\\nEx().check_function(&#39;print&#39;).check_args(0).has_equal_ast()\\\\n\\\\n# Test: Predefined code\\\\nEx().check_function(\\\\&quot;response.close\\\\&quot;)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nfrom urllib.request import urlopen, Request\\\\n\\\\n# Specify the url\\\\nurl = \\\\&quot;https://campus.datacamp.com/courses/1606/4135?ex=2\\\\&quot;\\\\n\\\\n# This packages the request\\\\nrequest = Request(url)\\\\n\\\\n# Sends the request and catches the response: response\\\\nresponse = urlopen(request)\\\\n\\\\n# Extract the response: html\\\\nhtml = response.read()\\\\n\\\\n# Print the html\\\\nprint(html)\\\\n\\\\n# Be polite and close the response!\\\\nresponse.close()&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass &lt;code&gt;request&lt;/code&gt; as an argument to &lt;code&gt;urlopen()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Apply the method &lt;code&gt;read()&lt;/code&gt; to the response object &lt;code&gt;response&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Simply pass &lt;code&gt;html&lt;/code&gt; to the &lt;code&gt;print()&lt;/code&gt; function.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for closing the response.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.7388926129245199,&quot;^2R&quot;,42712],[&quot;^ &quot;,&quot;id&quot;,42713,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;Now that you&#39;ve got your head and hands around making HTTP requests using the urllib package, you&#39;re going to figure out how to do the same using the higher-level requests library. You&#39;ll once again be pinging DataCamp servers for their &lt;code&gt;\\\\&quot;http://www.datacamp.com/teach/documentation\\\\&quot;&lt;/code&gt; page.&lt;/p&gt;\\\\n&lt;p&gt;Note that unlike in the previous exercises using urllib, you don&#39;t have to close the connection when using requests!&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Performing HTTP requests in Python using requests&quot;,&quot;^2A&quot;,&quot;# Import package\\\\n\\\\n\\\\n# Specify the url: url\\\\n\\\\n\\\\n# Packages the request, send the request and catch the response: r\\\\n\\\\n\\\\n# Extract the response: text\\\\n\\\\n\\\\n# Print the html\\\\nprint(text)&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the package &lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of interest to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the URL, send the request and catch the response with a single function &lt;code&gt;requests.get()&lt;/code&gt;, assigning the response to the variable &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; to return the HTML of the webpage as a string; store the result in a variable &lt;code&gt;text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print the HTML of the webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,8,&quot;sct&quot;,&quot;\\\\n# Test: import requests\\\\nEx().has_import(\\\\&quot;requests\\\\&quot;)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n# Test: &#39;text&#39; variable\\\\nEx().has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `text`?\\\\&quot;)\\\\nEx().check_object(\\\\&quot;text\\\\&quot;)\\\\n\\\\n# Test: Predefined code\\\\nEx().check_function(&#39;print&#39;).check_args(0).has_equal_ast()\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import package\\\\nimport requests\\\\n\\\\n# Specify the url: url\\\\nurl = \\\\&quot;http://www.datacamp.com/teach/documentation\\\\&quot;\\\\n\\\\n# Packages the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response: text\\\\ntext = r.text\\\\n\\\\n# Print the html\\\\nprint(text)&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a package &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;import x&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Did you type in the URL correctly?&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as an argument to &lt;code&gt;requests.get()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; by executing &lt;code&gt;r.text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code for printing the HTML of the webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.8271309832832663,&quot;^2R&quot;,42713],[&quot;^ &quot;,&quot;id&quot;,990670,&quot;^9&quot;,&quot;VideoExercise&quot;,&quot;^2@&quot;,null,&quot;^K&quot;,&quot;Scraping the web in Python&quot;,&quot;^2A&quot;,&quot;&quot;,&quot;^2B&quot;,null,&quot;^28&quot;,9,&quot;sct&quot;,&quot;&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;&quot;,&quot;^2E&quot;,null,&quot;^2F&quot;,null,&quot;xp&quot;,50,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^2J&quot;,null,&quot;^2K&quot;,null,&quot;^2L&quot;,56.25,&quot;^2M&quot;,&quot;course_1606_9d1f8a331d1200c7e1bdbfcaf3a7a491&quot;,&quot;key&quot;,&quot;da43858012&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2N&quot;,1606,&quot;^2O&quot;,4135,&quot;^1H&quot;,null,&quot;^2P&quot;,&quot;v0&quot;,&quot;^2Q&quot;,0.28565539778772764,&quot;^2R&quot;,990670],[&quot;^ &quot;,&quot;id&quot;,42715,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;In this interactive exercise, you&#39;ll learn how to use the BeautifulSoup package to &lt;em&gt;parse&lt;/em&gt;, &lt;em&gt;prettify&lt;/em&gt; and &lt;em&gt;extract&lt;/em&gt; information from HTML. You&#39;ll scrape the data from the webpage of Guido van Rossum, Python&#39;s very own &lt;a href=\\\\&quot;https://en.wikipedia.org/wiki/Benevolent_dictator_for_life\\\\&quot;&gt;Benevolent Dictator for Life&lt;/a&gt;. In the following exercises, you&#39;ll prettify the HTML and then extract the text and the hyperlinks.&lt;/p&gt;\\\\n&lt;p&gt;The URL of interest is &lt;code&gt;url = &#39;https://www.python.org/~guido/&#39;&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Parsing HTML with BeautifulSoup&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom ____ import ____\\\\n\\\\n# Specify url: url\\\\n\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\n\\\\n\\\\n# Extracts the response as html: html_doc\\\\n\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\n\\\\n\\\\n# Prettify the BeautifulSoup object: pretty_soup\\\\n\\\\n\\\\n# Print the response\\\\nprint(pretty_soup)&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Import the function &lt;code&gt;BeautifulSoup&lt;/code&gt; from the package &lt;code&gt;bs4&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Assign the URL of interest to the variable &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Package the request to the URL, send the request and catch the response with a single function &lt;code&gt;requests.get()&lt;/code&gt;, assigning the response to the variable &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; to return the HTML of the webpage as a string; store the result in a variable &lt;code&gt;html_doc&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Create a BeautifulSoup object &lt;code&gt;soup&lt;/code&gt; from the resulting HTML using the function &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;prettify()&lt;/code&gt; on &lt;code&gt;soup&lt;/code&gt; and assign the result to &lt;code&gt;pretty_soup&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print to prettified HTML to your shell!&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,10,&quot;sct&quot;,&quot;# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;requests\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: import BeautifulSoup\\\\nimport_msg = \\\\&quot;Did you correctly import the required packages?\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;bs4.BeautifulSoup\\\\&quot;,\\\\n    not_imported_msg=import_msg\\\\n)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n\\\\n# Test: &#39;html_doc&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `html_doc`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to BeautifulSoup() and &#39;soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;bs4.BeautifulSoup\\\\&quot;).check_args(0).has_equal_value()\\\\n  )\\\\n\\\\n# Test: call to prettify() and &#39;pretty_soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;pretty_soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;soup.prettify\\\\&quot;)\\\\n  )\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(0)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Prettify the BeautifulSoup object: pretty_soup\\\\npretty_soup = soup.prettify()\\\\n\\\\n# Print the response\\\\nprint(pretty_soup)&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;To import a function &lt;code&gt;y&lt;/code&gt; from a package &lt;code&gt;x&lt;/code&gt;, execute &lt;code&gt;from x import y&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Check the URL to make sure that you typed it in correctly.&lt;/li&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;url&lt;/em&gt; (the &lt;code&gt;url&lt;/code&gt; object you defined) as an argument to &lt;code&gt;requests.get()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;text&lt;/code&gt; attribute of the object &lt;code&gt;r&lt;/code&gt; by executing &lt;code&gt;r.text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Pass the extracted &lt;em&gt;HTML&lt;/em&gt; as an argument to &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;To use the &lt;code&gt;prettify()&lt;/code&gt; method on the BeautifulSoup object &lt;code&gt;soup&lt;/code&gt;, execute &lt;code&gt;soup.prettify()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code to print the prettified HTML.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.36782726865167836,&quot;^2R&quot;,42715],[&quot;^ &quot;,&quot;id&quot;,42716,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;As promised, in the following exercises, you&#39;ll learn the basics of extracting information from HTML soup. In this exercise, you&#39;ll figure out how to extract the text from the BDFL&#39;s webpage, along with printing the webpage&#39;s title.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the text&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\n\\\\n\\\\n# Get the title of Guido&#39;s webpage: guido_title\\\\n\\\\n\\\\n# Print the title of Guido&#39;s webpage to the shell\\\\n\\\\n\\\\n# Get Guido&#39;s text: guido_text\\\\n\\\\n\\\\n# Print Guido&#39;s text to the shell\\\\nprint(guido_text)&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;In the sample code, the HTML response object &lt;code&gt;html_doc&lt;/code&gt; has already been created: your first task is to Soupify it using the function &lt;code&gt;BeautifulSoup()&lt;/code&gt; and to assign the resulting soup to the variable &lt;code&gt;soup&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Extract the title from the HTML soup &lt;code&gt;soup&lt;/code&gt; using the attribute &lt;code&gt;title&lt;/code&gt; and assign the result to &lt;code&gt;guido_title&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Print the title of Guido&#39;s webpage to the shell using the &lt;code&gt;print()&lt;/code&gt; function.&lt;/li&gt;\\\\n&lt;li&gt;Extract the text from the HTML soup &lt;code&gt;soup&lt;/code&gt; using the method &lt;code&gt;get_text()&lt;/code&gt; and assign to &lt;code&gt;guido_text&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Hit submit to print the text from Guido&#39;s webpage to the shell.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,11,&quot;sct&quot;,&quot;# Test: Predefined code\\\\npredef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\n    \\\\&quot;requests\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: import BeautifulSoup\\\\nEx().has_import(\\\\n    \\\\&quot;bs4.BeautifulSoup\\\\&quot;,\\\\n    not_imported_msg=predef_msg\\\\n)\\\\n\\\\n# Test: &#39;url&#39; variable\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value()\\\\n\\\\n# Test: call to requests.get() and &#39;r&#39; variable\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_value()\\\\nEx().check_object(\\\\&quot;r\\\\&quot;)\\\\n\\\\n\\\\n# Test: &#39;html_doc&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;r.text\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `r.text` to create `html_doc`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to BeautifulSoup() and &#39;soup&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;bs4.BeautifulSoup\\\\&quot;).check_args(0).has_equal_value()\\\\n  )\\\\n\\\\n# Test: &#39;guido_title&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;guido_title\\\\&quot;).has_equal_value(),\\\\n  has_code(\\\\&quot;soup.title\\\\&quot;, pattern = False, not_typed_msg=\\\\&quot;Have you used `soup.title` to create `guido_title`?\\\\&quot;)\\\\n)\\\\n\\\\n# Test: call to print()\\\\nEx().has_printout(0)\\\\n\\\\n# Test: call to soup.get_text() and &#39;guido_text&#39; variable\\\\nEx().check_correct(\\\\n  check_object(\\\\&quot;guido_text\\\\&quot;).has_equal_value(),\\\\n  check_function(\\\\&quot;soup.get_text\\\\&quot;)\\\\n  )\\\\n\\\\n# Test: Predefined code\\\\nEx().has_printout(1)\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)\\\\n&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url: url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extract the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# Create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Get the title of Guido&#39;s webpage: guido_title\\\\nguido_title = soup.title\\\\n\\\\n# Print the title of Guido&#39;s webpage to the shell\\\\nprint(guido_title)\\\\n\\\\n# Get Guido&#39;s text: guido_text\\\\nguido_text = soup.get_text()\\\\n\\\\n# Print Guido&#39;s text to the shell\\\\nprint(guido_text)&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;HTML response object&lt;/em&gt; as an argument to &lt;code&gt;BeautifulSoup()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You can access the &lt;code&gt;title&lt;/code&gt; attribute of the object &lt;code&gt;soup&lt;/code&gt; by executing &lt;code&gt;soup.title&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The object that contains the title of Guido&#39;s webpage is &lt;code&gt;guido_title&lt;/code&gt;; pass this as an argument to &lt;code&gt;print()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;get_text()&lt;/code&gt; on the HTML soup &lt;code&gt;soup&lt;/code&gt; by executing &lt;code&gt;soup.get_text()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;You don&#39;t have to modify the code to print the text from Guido&#39;s webpage.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.9339294396862643,&quot;^2R&quot;,42716],[&quot;^ &quot;,&quot;id&quot;,42717,&quot;^9&quot;,&quot;NormalExercise&quot;,&quot;^2@&quot;,&quot;&lt;p&gt;In this exercise, you&#39;ll figure out how to extract the URLs of the hyperlinks from the BDFL&#39;s webpage. In the process, you&#39;ll become close friends with the soup method &lt;code&gt;find_all()&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^K&quot;,&quot;Turning a webpage into data using BeautifulSoup: getting the hyperlinks&quot;,&quot;^2A&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Print the title of Guido&#39;s webpage\\\\nprint(soup.title)\\\\n\\\\n# Find all &#39;a&#39; tags (which define hyperlinks): a_tags\\\\n\\\\n\\\\n# Print the URLs to the shell\\\\nfor ____ in ____:\\\\n    ____&quot;,&quot;^2B&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Use the method &lt;code&gt;find_all()&lt;/code&gt; to find all hyperlinks in &lt;code&gt;soup&lt;/code&gt;, remembering that hyperlinks are defined by the HTML tag &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; but passed to &lt;code&gt;find_all()&lt;/code&gt; without angle brackets; store the result in the variable &lt;code&gt;a_tags&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;The variable &lt;code&gt;a_tags&lt;/code&gt; is a results set: your job now is to enumerate over it, using a &lt;code&gt;for&lt;/code&gt; loop and to print the actual URLs of the hyperlinks; to do this, for every element &lt;code&gt;link&lt;/code&gt; in &lt;code&gt;a_tags&lt;/code&gt;, you want to &lt;code&gt;print()&lt;/code&gt; &lt;code&gt;link.get(&#39;href&#39;)&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^28&quot;,12,&quot;sct&quot;,&quot;predef_msg = \\\\&quot;You don&#39;t have to change any of the predefined code.\\\\&quot;\\\\nEx().has_import(\\\\&quot;requests\\\\&quot;)\\\\nEx().has_import(\\\\&quot;bs4.BeautifulSoup\\\\&quot;)\\\\nEx().check_object(\\\\&quot;url\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().check_function(\\\\&quot;requests.get\\\\&quot;).check_args(0).has_equal_ast()\\\\nEx().check_object(\\\\&quot;html_doc\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().check_object(\\\\&quot;soup\\\\&quot;).has_equal_value(incorrect_msg = predef_msg)\\\\nEx().has_printout(0)\\\\n\\\\nEx().check_correct(\\\\n    check_object(\\\\&quot;a_tags\\\\&quot;),\\\\n    check_function(\\\\&quot;soup.find_all\\\\&quot;).check_args(0).has_equal_value()\\\\n)\\\\nEx().check_for_loop().multi(\\\\n        check_iter().has_equal_value(incorrect_msg = \\\\&quot;You have to iterate over `a_tags`\\\\&quot;),\\\\n        check_body().set_context(&#39;&lt;a href=\\\\&quot;pics.html\\\\&quot;&gt;&lt;img border=\\\\&quot;0\\\\&quot; src=\\\\&quot;images/IMG_2192.jpg\\\\&quot;/&gt;&lt;/a&gt;&#39;).check_function(\\\\&quot;print\\\\&quot;).check_args(0).check_function(\\\\&quot;link.get\\\\&quot;).check_args(0).has_equal_value()\\\\n    )\\\\n\\\\nsuccess_msg(\\\\&quot;Awesome!\\\\&quot;)&quot;,&quot;^2C&quot;,&quot;&quot;,&quot;^2D&quot;,&quot;# Import packages\\\\nimport requests\\\\nfrom bs4 import BeautifulSoup\\\\n\\\\n# Specify url\\\\nurl = &#39;https://www.python.org/~guido/&#39;\\\\n\\\\n# Package the request, send the request and catch the response: r\\\\nr = requests.get(url)\\\\n\\\\n# Extracts the response as html: html_doc\\\\nhtml_doc = r.text\\\\n\\\\n# create a BeautifulSoup object from the HTML: soup\\\\nsoup = BeautifulSoup(html_doc)\\\\n\\\\n# Print the title of Guido&#39;s webpage\\\\nprint(soup.title)\\\\n\\\\n# Find all &#39;a&#39; tags (which define hyperlinks): a_tags\\\\na_tags = soup.find_all(&#39;a&#39;)\\\\n\\\\n# Print the URLs to the shell\\\\nfor link in a_tags:\\\\n    print(link.get(&#39;href&#39;))&quot;,&quot;^2E&quot;,&quot;&lt;ul&gt;\\\\n&lt;li&gt;Pass the &lt;em&gt;HTML tag&lt;/em&gt; to find (without the angle brackets &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) as a string argument to &lt;code&gt;find_all()&lt;/code&gt;.&lt;/li&gt;\\\\n&lt;li&gt;Recall that the &lt;code&gt;for&lt;/code&gt; loop recipe is: &lt;code&gt;for&lt;/code&gt; &lt;em&gt;loop variable&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;results set&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;. Don&#39;t forget to pass &lt;code&gt;link.get(&#39;href&#39;)&lt;/code&gt; as an argument to &lt;code&gt;print()&lt;/code&gt; inside the &lt;code&gt;for&lt;/code&gt; loop body.&lt;/li&gt;\\\\n&lt;/ul&gt;&quot;,&quot;^2F&quot;,null,&quot;xp&quot;,100,&quot;^2G&quot;,[],&quot;^2H&quot;,[],&quot;^2I&quot;,&quot;&quot;,&quot;^J&quot;,&quot;python&quot;,&quot;^2Q&quot;,0.7373867099980398,&quot;^2R&quot;,42717]]]]],&quot;activeImage&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^Z&quot;,&quot;SUCCESS&quot;,&quot;^[&quot;,&quot;course-1606-master:cb59605c00ed73a970165be3564ff450-20220811125027179&quot;]]],&quot;sharedImage&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^Z&quot;,&quot;NOT_FETCHED&quot;,&quot;^[&quot;,null]]],&quot;^F&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^Z&quot;,&quot;SUCCESS&quot;,&quot;^[&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;template&quot;,&quot;id&quot;,3046,&quot;^H&quot;,&quot;2022-12-01T15:10:45.124Z&quot;,&quot;^I&quot;,&quot;2022-12-05T06:31:46.338Z&quot;,&quot;key&quot;,&quot;course-dataset-intermediate-importing-data-in-python&quot;,&quot;^J&quot;,&quot;Python&quot;,&quot;^K&quot;,&quot;Intermediate Importing Data in Python&quot;,&quot;^L&quot;,&quot;Explore the datasets from the course, Intermediate Importing Data in Python.&quot;,&quot;^M&quot;,false,&quot;^N&quot;,&quot;d9783ad9a9e677a4f583a5bd9ed5b9d5987a2859&quot;,&quot;^O&quot;,null,&quot;^P&quot;,null,&quot;^Q&quot;,null,&quot;^R&quot;,&quot;ade0176d-8e1d-436c-b7c1-44c3f4f1df8f&quot;,&quot;^S&quot;,[&quot;course-dataset&quot;],&quot;^T&quot;,1606,&quot;^U&quot;,[],&quot;^V&quot;,null]]]]]]],&quot;settings&quot;,[&quot;^2&quot;,[&quot;uiTheme&quot;,&quot;DARK&quot;,&quot;feedbackRatingStatus&quot;,&quot;NONE&quot;]],&quot;streakInfo&quot;,[&quot;^ &quot;,&quot;^9&quot;,&quot;StreakUnknown&quot;],&quot;systemStatus&quot;,[&quot;^2&quot;,[&quot;indicator&quot;,&quot;none&quot;,&quot;description&quot;,&quot;No status has been fetched from the Status Page.&quot;]],&quot;user&quot;,[&quot;^2&quot;,[&quot;status&quot;,&quot;not_initiate&quot;,&quot;settings&quot;,[&quot;^2&quot;,[&quot;aiFlags&quot;,[&quot;^2&quot;,[&quot;aiSolutionExplanationEnabled&quot;,false,&quot;aiErrorExplanationEnabled&quot;,false]]]]]]]]]";</script><div id="root"><div class="theme progress-indicator--visible"><style data-emotion="css 19enzrs">.css-19enzrs{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#F7F7FC;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:50px;padding-left:10px;padding-right:10px;position:relative;z-index:15;}</style><header data-cy="alpa-navbar" class="css-19enzrs"><style data-emotion="css vpr568">.css-vpr568{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}</style><div class="css-vpr568"><style data-emotion="css 19lbh5u">.css-19lbh5u{padding-left:6px;padding-right:6px;}</style><style data-emotion="css 1k1otg6">.css-1k1otg6{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;padding-left:16px;padding-right:16px;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#0065D1;background-color:transparent;border-color:transparent;padding-left:6px;padding-right:6px;}.css-1k1otg6::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-1k1otg6:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-1k1otg6:active:not(:disabled){background-color:transparent;}.css-1k1otg6:disabled{opacity:0.6;cursor:default;}</style><a class="alpa-navbar-logo css-1k1otg6" data-cy="header-logo" data-testid="alpa-navbar-logo" data-trackid="alpa-navbar-logo" href="https://www.datacamp.com" aria-label="landing"><style data-emotion="css 12yghq1">.css-12yghq1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><span class="css-12yghq1"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 27 35" xml:space="preserve" height="28"><path d="M11.699 8.514v8.333L2.858 21.89V3.44l8.841 5.074zm2.861 17.507v-7.51l11.84-6.757-2.88-1.65-8.96 5.112V7.68a1.442 1.442 0 0 0-.718-1.242L3.056.256C3.027.238 2.998.224 2.97.21A2.064 2.064 0 0 0 0 2.07v21.184a2.067 2.067 0 0 0 2.971 1.865l.082-.042 8.64-4.933v6.72c.002.513.277.987.722 1.243L23.502 34.4l2.88-1.651-11.822-6.728z" fill-rule="evenodd" clip-rule="evenodd" fill="#05192D"/></svg></span></a><nav aria-label="Breadcrumb" data-testid="alpa-navbar-breadcrumbs"><style data-emotion="css 1goqhco">.css-1goqhco{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:0;}.css-1goqhco div[aria-hidden=\'true\']{color:#5D6A77;display:none;padding:0 4px;}.css-1goqhco div[aria-hidden=\'true\']:first-of-type{display:inline-block;}@media screen and (min-width: 820px){.css-1goqhco div[aria-hidden=\'true\']{display:inline-block;}}.css-1goqhco li{display:none;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-flex-shrink:1;-ms-flex-negative:1;flex-shrink:1;list-style:none;}@media screen and (min-width: 820px){.css-1goqhco li{display:inline-block;}}.css-1goqhco li:first-of-type{display:inline-block;}.css-1goqhco li:last-of-type{display:inline-block;}.css-1goqhco li a{color:#05192D;font-weight:normal;height:30px;line-height:21px;min-height:unset;padding:2px;}.css-1goqhco li a span{display:inline-block;max-width:20vw;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.css-1goqhco li:last-of-type a{font-weight:bold;}</style><ol itemscope itemtype="http://schema.org/BreadcrumbList" class="css-1goqhco"><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><style data-emotion="css ef1ew4">.css-ef1ew4{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;padding-left:16px;padding-right:16px;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#0065D1;background-color:transparent;border-color:transparent;}.css-ef1ew4::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-ef1ew4:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-ef1ew4:active:not(:disabled){background-color:transparent;}.css-ef1ew4:disabled{opacity:0.6;cursor:default;}</style><a data-trackid="alpa-navbar-breadcrumb-learn" href="https://www.datacamp.com" itemprop="item" aria-label="Learn" class="css-ef1ew4"><span class="css-12yghq1"><span itemprop="name">Learn</span></span></a><meta content="0" itemprop="position"></li><div aria-hidden="true">/</div><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a data-trackid="alpa-navbar-breadcrumb-courses" href="https://www.datacamp.com/courses-all" itemprop="item" aria-label="Courses" class="css-ef1ew4"><span class="css-12yghq1"><span itemprop="name">Courses</span></span></a><meta content="1" itemprop="position"></li><div aria-hidden="true">/</div><li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a data-trackid="alpa-navbar-breadcrumb-course" href="https://www.datacamp.com/courses/intermediate-importing-data-in-python" itemprop="item" aria-label="Intermediate Importing Data in Python" class="css-ef1ew4"><span class="css-12yghq1"><span itemprop="name">Intermediate Importing Data in Python</span></span></a><meta content="2" itemprop="position"></li></ol></nav></div><style data-emotion="css 1jov1vc">.css-1jov1vc{-webkit-box-pack:initial;-ms-flex-pack:initial;-webkit-justify-content:initial;justify-content:initial;}</style><div class="css-1jov1vc"><nav><style data-emotion="css yrg7b6">.css-yrg7b6{color:#05192D;border-top-right-radius:0;border-bottom-right-radius:0;border-right:0;}.css-yrg7b6:hover{color:#05192D;border-bottom-color:rgba(5, 25, 45, 0.6);}.css-yrg7b6:after{border-top-right-radius:0;border-bottom-right-radius:0;}</style><style data-emotion="css 5kjlei">.css-5kjlei{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#05192D;background-color:transparent;border-color:rgba(5, 25, 45, 0.6);color:#05192D;border-top-right-radius:0;border-bottom-right-radius:0;border-right:0;}.css-5kjlei::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-5kjlei:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-5kjlei:active:not(:disabled){background-color:transparent;}.css-5kjlei:disabled{opacity:0.6;cursor:default;}.css-5kjlei:hover{color:#05192D;border-bottom-color:rgba(5, 25, 45, 0.6);}.css-5kjlei:after{border-top-right-radius:0;border-bottom-right-radius:0;}</style><a data-cy="header-previous" class="css-5kjlei" href="/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=1" aria-label="Go to previous exercise"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M4.42 8 16 7.998a1 1 0 0 1 0 2L4.41 10l3.285 3.296a.998.998 0 1 1-1.417 1.41l-4.93-4.948A.998.998 0 0 1 1.36 8.23l4.933-4.938a1 1 0 0 1 1.414 0c.39.391.39 1.025 0 1.416L4.42 7.999Z"/></svg></a><style data-emotion="css 3vjr9n">.css-3vjr9n{color:#05192D;border-radius:0;}.css-3vjr9n:after{border-radius:0;}</style><style data-emotion="css 1mmt5cf">.css-1mmt5cf{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;padding-left:16px;padding-right:16px;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#05192D;background-color:transparent;border-color:rgba(5, 25, 45, 0.6);color:#05192D;border-radius:0;}.css-1mmt5cf::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-1mmt5cf:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-1mmt5cf:active:not(:disabled){background-color:transparent;}.css-1mmt5cf:disabled{opacity:0.6;cursor:default;}.css-1mmt5cf:after{border-radius:0;}</style><button data-cy="header-outline" class="css-1mmt5cf" type="button"><span class="css-12yghq1"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M4 6a1 1 0 1 1 0-2h10a1 1 0 0 1 0 2H4Zm0 4a1 1 0 1 1 0-2h10a1 1 0 0 1 0 2H4Zm0 4a1 1 0 0 1 0-2h10a1 1 0 0 1 0 2H4Z"/></svg>Course Outline</span></button><style data-emotion="css 1hz0pt1">.css-1hz0pt1{color:#05192D;border-top-left-radius:0;border-bottom-left-radius:0;border-left:0;}.css-1hz0pt1:hover{color:#05192D;border-bottom-color:rgba(5, 25, 45, 0.6);}.css-1hz0pt1:after{border-top-left-radius:0;border-bottom-left-radius:0;}</style><style data-emotion="css 1anorv4">.css-1anorv4{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#05192D;background-color:transparent;border-color:rgba(5, 25, 45, 0.6);color:#05192D;border-top-left-radius:0;border-bottom-left-radius:0;border-left:0;}.css-1anorv4::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-1anorv4:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-1anorv4:active:not(:disabled){background-color:transparent;}.css-1anorv4:disabled{opacity:0.6;cursor:default;}.css-1anorv4:hover{color:#05192D;border-bottom-color:rgba(5, 25, 45, 0.6);}.css-1anorv4:after{border-top-left-radius:0;border-bottom-left-radius:0;}</style><a data-cy="header-next" class="css-1anorv4" href="/courses/intermediate-importing-data-in-python/importing-data-from-the-internet-1?ex=3" aria-label="Go to next exercise"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M13.58 10 2 10.002a1 1 0 0 1 0-2L13.59 8l-3.285-3.296a.998.998 0 1 1 1.417-1.41l4.93 4.948a.998.998 0 0 1-.012 1.527l-4.933 4.938a1 1 0 0 1-1.414 0 1.002 1.002 0 0 1 0-1.416l3.287-3.29Z"/></svg></a></nav></div><style data-emotion="css r4fpqc">.css-r4fpqc{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end;}</style><nav class="css-r4fpqc"><style data-emotion="css 1dskn3o">.css-1dskn3o{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><nav class="css-1dskn3o"><style data-emotion="css 1opalb8">.css-1opalb8{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:8px;}</style><div data-cy="header-session" class="css-1opalb8"><style data-emotion="css 8zmdb0">.css-8zmdb0{color:#03EF62;}</style><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18" aria-label="Session Ready" class="css-8zmdb0"><path fill="currentColor" d="M9 18A9 9 0 1 1 9 0a9 9 0 0 1 0 18Z"/></svg></div><style data-emotion="css 16cuyl0">.css-16cuyl0{color:#05192D;}</style><style data-emotion="css 10ym712">.css-10ym712{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;vertical-align:middle;-webkit-text-decoration:none;text-decoration:none;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;margin:0;padding:0;outline:0;border-style:solid;border-radius:4px;border-width:2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 125ms ease-out;transition:background-color 125ms ease-out;cursor:pointer;height:36px;min-width:36px;width:auto;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;font-size:14px;color:#0065D1;background-color:transparent;border-color:transparent;color:#05192D;}.css-10ym712::after{content:\'\';display:block;position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:-4px;border-radius:6px;pointer-events:none;-webkit-transition:box-shadow 125ms ease-out;transition:box-shadow 125ms ease-out;}.css-10ym712:hover:not(:disabled){background-color:rgba(48, 57, 105, 0.06);}.css-10ym712:active:not(:disabled){background-color:transparent;}.css-10ym712:disabled{opacity:0.6;cursor:default;}</style><button data-cy="header-slides" class="css-10ym712" type="button" aria-label="Show slides"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M14 9.004H9.996a2 2 0 0 1-2-2V2H4v14h10V9.004Zm1.828-2.815A1.938 1.938 0 0 1 16 7v9a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.003a2 2 0 0 1 1.415.586l4.997 5a2 2 0 0 1 .413.603Zm-1.832.815-4-4v4h4Z"/></svg></button><button data-cy="header-video" class="css-10ym712" type="button" aria-label="Show video"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="m13 6.3 3.331-2.998A1 1 0 0 1 18 4.045v9.91a1 1 0 0 1-1.669.743L13 11.7V14c0 .552-.485 1-1.083 1H1.083C.485 15 0 14.552 0 14V4c0-.552.485-1 1.083-1h10.834C12.515 3 13 3.448 13 4v2.3Zm0 2.69v.02l3 2.7V6.29l-3 2.7ZM2 5v8h9V5H2Z"/></svg></button><button data-cy="header-notes" class="css-10ym712" type="button" aria-label="Take notes"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M12.528.293a.999.999 0 0 1 1.414 0l3.765 3.765a.999.999 0 0 1 0 1.414L5.472 17.707a1 1 0 0 1-.707.293H1a1 1 0 0 1-1-1v-3.765c0-.265.105-.52.293-.707L12.528.293zM2 13.65V16h2.35l8.412-8.412-2.35-2.35L2 13.65zm9.826-9.826 2.351 2.351 1.409-1.409-2.351-2.35-1.409 1.408zM16.529 18h-8a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2z"/></svg></button><button data-cy="header-mobile" class="css-10ym712" type="button" aria-label="Continue learning on mobile"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M5.5 2v14h7V2h-7Zm-1-2h9a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-9a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1Zm4 13h1a1 1 0 0 1 0 2h-1a1 1 0 0 1 0-2Z"/></svg></button><button data-cy="header-issue" data-test-id="header-report-issue-button" class="css-10ym712" type="button" aria-label="Provide feedback"><svg width="16" height="16" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M17.744 14.31 10.869 1.647a2.119 2.119 0 0 0-3.72 0L.268 14.31a2.116 2.116 0 0 0 1.862 3.148h13.75A2.122 2.122 0 0 0 18 15.383a2.12 2.12 0 0 0-.256-1.052v-.021zm-2.054.419L9.448 3.24a.5.5 0 0 0-.879 0L2.322 14.73a.5.5 0 0 0 .439.739H15.25a.502.502 0 0 0 .44-.74zM8.02 7.017a.994.994 0 1 1 1.99 0v2.57a.994.994 0 1 1-1.99 0v-2.57zm1.021 6.961a1.144 1.144 0 0 1-1.054-.704 1.143 1.143 0 0 1 .247-1.243 1.14 1.14 0 0 1 1.947.807 1.14 1.14 0 0 1-1.14 1.14z"/></svg></button></nav></nav></header><style data-emotion="css 1cgqq7y">.css-1cgqq7y{position:absolute;top:54px;bottom:32px;right:12px;left:12px;overflow:hidden;}</style><main class="css-1cgqq7y"><div data-cy="server-side-loader-placeholder"><aside class="exercise--sidebar" style="width:40%"><div class="exercise--sidebar-content"><div class="listview__outer"><div class="listview__inner"><div class="listview__section"><div><div role="button" class="listview__header"><style data-emotion="css r7m65a">.css-r7m65a{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%;padding-right:16px;}</style><div class="css-r7m65a"><style data-emotion="css 171fln0">.css-171fln0{font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;}</style><style data-emotion="css 5tinya">.css-5tinya{color:#05192D;font-weight:800;font-size:18px;margin-bottom:8px;line-height:1.25;font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;}</style><style data-emotion="css oewxnl">.css-oewxnl{color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-size:14px;font-weight:400;line-height:1;margin:0;padding:0;color:#05192D;font-weight:800;font-size:18px;margin-bottom:8px;line-height:1.25;font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;}</style><h2 class="css-oewxnl"><svg width="14" height="14" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M4 2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H4Zm0-2h10a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V3a3 3 0 0 1 3-3Zm2 6h6a1 1 0 0 1 0 2H6a1 1 0 1 1 0-2Zm0 4h6a1 1 0 0 1 0 2H6a1 1 0 0 1 0-2Z"/></svg>Exercise</h2></div></div></div><div class="listview__content"><style data-emotion="css ikv0qb">.css-ikv0qb{position:relative;padding:16px;}</style><div class="css-ikv0qb"><style data-emotion="css 1s2t7f6">.css-1s2t7f6{color:#05192D;font-weight:800;font-size:20px;margin-bottom:8px;line-height:1.25;}</style><style data-emotion="css f2t179">.css-f2t179{color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-size:14px;font-weight:400;line-height:1;margin:0;padding:0;color:#05192D;font-weight:800;font-size:20px;margin-bottom:8px;line-height:1.25;}</style><h1 class="css-f2t179">Importing flat files from the web: your turn!</h1><style data-emotion="css 8czf7d">.css-8czf7d{line-height:1.5;}.css-8czf7d code{font-family:JetBrainsMonoNL,Menlo,Monaco,\'Courier New\',monospace;margin:0 2px;padding:2px 4px;line-height:1.25;background-color:#EFEFF5;border-radius:4px;font-size:86%;mix-blend-mode:multiply;}.css-8czf7d pre{background-color:#EFEFF5;padding:8px;margin:0;border-radius:4px;tab-size:4;white-space:pre;line-height:1.25;mix-blend-mode:multiply;}.css-8czf7d pre>code{margin:0;padding:0;background-color:transparent;}.css-8czf7d ul,.css-8czf7d ol{padding-left:16px;}.css-8czf7d ul:first-of-type,.css-8czf7d ol:first-of-type{margin-top:0;}.css-8czf7d p:first-of-type{margin-top:0;}.css-8czf7d li{margin-bottom:8px;}.css-8czf7d a{color:#0065D1;-webkit-text-decoration:none;text-decoration:none;font-weight:800;border-radius:4px;outline:0;}.css-8czf7d a:hover{color:#0065D1;-webkit-text-decoration:underline;text-decoration:underline;}.css-8czf7d a:focus-visible{box-shadow:0 0 0 2px #257DFE;}.css-8czf7d a code{color:#0065D1;}.css-8czf7d hr{background-color:rgba(48, 57, 105, 0.15);border:0;height:1px;margin:16px 0;}</style><style data-emotion="css hu6jey">.css-hu6jey{color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-size:14px;font-weight:400;line-height:1;margin:0;padding:0;line-height:1.5;}.css-hu6jey code{font-family:JetBrainsMonoNL,Menlo,Monaco,\'Courier New\',monospace;margin:0 2px;padding:2px 4px;line-height:1.25;background-color:#EFEFF5;border-radius:4px;font-size:86%;mix-blend-mode:multiply;}.css-hu6jey pre{background-color:#EFEFF5;padding:8px;margin:0;border-radius:4px;tab-size:4;white-space:pre;line-height:1.25;mix-blend-mode:multiply;}.css-hu6jey pre>code{margin:0;padding:0;background-color:transparent;}.css-hu6jey ul,.css-hu6jey ol{padding-left:16px;}.css-hu6jey ul:first-of-type,.css-hu6jey ol:first-of-type{margin-top:0;}.css-hu6jey p:first-of-type{margin-top:0;}.css-hu6jey li{margin-bottom:8px;}.css-hu6jey a{color:#0065D1;-webkit-text-decoration:none;text-decoration:none;font-weight:800;border-radius:4px;outline:0;}.css-hu6jey a:hover{color:#0065D1;-webkit-text-decoration:underline;text-decoration:underline;}.css-hu6jey a:focus-visible{box-shadow:0 0 0 2px #257DFE;}.css-hu6jey a code{color:#0065D1;}.css-hu6jey hr{background-color:rgba(48, 57, 105, 0.15);border:0;height:1px;margin:16px 0;}</style><div class="css-hu6jey"><div class><p>You are about to import your first file from the web! The flat file you will import will be <code>&apos;winequality-red.csv&apos;</code> from the University of California, Irvine&apos;s <a href="https://archive.ics.uci.edu/ml/index.php">Machine Learning repository</a>. The flat file contains tabular data of physiochemical properties of red wine, such as pH, alcohol content and citric acid content, along with wine quality rating.</p>\n<p>The URL of the file is</p>\n<pre><code>&apos;https://assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&apos;\n</code></pre>\n<p>After you import it, you&apos;ll check your working directory to confirm that it is there and then you&apos;ll load it into a <code>pandas</code> DataFrame.</p></div></div></div></div></div><div class="listview__section" style="min-height:calc(100% - 33px)"><div><div role="button" class="listview__header"><div class="css-r7m65a"><style data-emotion="css 1ubtfgv">.css-1ubtfgv{font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;width:100%;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><style data-emotion="css 58l903">.css-58l903{color:#05192D;font-weight:800;font-size:18px;margin-bottom:8px;line-height:1.25;font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;width:100%;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><style data-emotion="css bzfyd1">.css-bzfyd1{color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-size:14px;font-weight:400;line-height:1;margin:0;padding:0;color:#05192D;font-weight:800;font-size:18px;margin-bottom:8px;line-height:1.25;font-size:16px;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:16px;width:100%;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><h2 class="css-bzfyd1"><svg width="14" height="14" aria-hidden="true" viewbox="0 0 18 18"><path fill="currentColor" d="M9 16A7 7 0 1 0 9 2a7 7 0 0 0 0 14Zm0 2A9 9 0 1 1 9 0a9 9 0 0 1 0 18Zm2.326-11.96a1 1 0 0 1 1.555 1.258L8.773 12.37a1 1 0 0 1-1.534.024l-2.124-2.46a1 1 0 0 1 1.514-1.307l1.342 1.556 3.355-4.144Z"/></svg>Instructions</h2><style data-emotion="css icrdc5">.css-icrdc5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-weight:800;line-height:1;text-transform:uppercase;border-radius:4px;padding-left:4px;padding-right:4px;letter-spacing:0.5px;color:#05192D;background-color:#FCCE0D;font-size:12px;height:18px;}</style><span class="css-icrdc5"><style data-emotion="css 12ymhch">.css-12ymhch{max-width:164px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;}</style><span class="css-12ymhch">100 XP</span></span></div></div></div><div class="listview__content"><div><div class="css-ikv0qb"><div class="css-hu6jey"><div class="exercise--instructions__content"><ul>\n<li>Import the function <code>urlretrieve</code> from the subpackage <code>urllib.request</code>.</li>\n<li>Assign the URL of the file to the variable <code>url</code>.</li>\n<li>Use the function <code>urlretrieve()</code> to save the file locally as <code>&apos;winequality-red.csv&apos;</code>.</li>\n<li>Execute the remaining code to load <code>&apos;winequality-red.csv&apos;</code> in a pandas DataFrame and to print its head to the shell.</li>\n</ul></div></div><style data-emotion="css kbabwt">.css-kbabwt{margin:16px -16px 0;}</style><div class="css-kbabwt"><section class="dc-sct-feedback" tabindex="-1"><div></div><nav class="dc-sct-feedback__nav"><style data-emotion="css fs3inu">.css-fs3inu{padding-left:16px;}</style><div class="css-fs3inu"><style data-emotion="css 12j1yck">.css-12j1yck{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:0 15px;}.css-12j1yck:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-12j1yck:disabled,.css-12j1yck:hover:disabled,.css-12j1yck:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-12j1yck:focus{outline:0;}.css-12j1yck:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><button class="dc-sct-feedback__nav--hint-solution css-12j1yck" type="button" data-cy="exercise-show-hint"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M9 0a7 7 0 014.95 11.95l-.001-.001c-.794.795-.949 1.1-.949 2.051a1 1 0 01-2 0c0-1.548.396-2.325 1.535-3.467l.04-.037a5 5 0 10-7.11.037C6.605 11.675 7 12.453 7 14a1 1 0 01-2 0c0-.951-.155-1.256-.949-2.051A7 7 0 019 0zm0 7a1 1 0 011 1v6a1 1 0 01-2 0V8a1 1 0 011-1zm0 11c-1.657 0-3-.895-3-2h6c0 1.105-1.343 2-3 2z" fill-rule="evenodd"/></svg><style data-emotion="css aib9ji">.css-aib9ji{font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><style data-emotion="css vvk465">.css-vvk465{-webkit-font-smoothing:antialiased;color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-style:normal;font-size:14px;font-weight:400;font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><span class="css-vvk465">Take Hint (-30 XP)</span></button></div></nav></section></div></div></div></div></div></div></div></div></aside><section class="exercise--content" style="width:60%"><div class="exercise-waiting"><style data-emotion="css 1gnr744">.css-1gnr744{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);-moz-transform:translate(-50%, -50%);-ms-transform:translate(-50%, -50%);transform:translate(-50%, -50%);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;}</style><div class="css-1gnr744"><style data-emotion="css iakxqy animation-1i1ri7z">.css-iakxqy{-webkit-animation:animation-1i1ri7z cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;animation:animation-1i1ri7z cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;will-change:clip-path;width:50px;}@-webkit-keyframes animation-1i1ri7z{0%,6%{-webkit-clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);}100%{-webkit-clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);}}@keyframes animation-1i1ri7z{0%,6%{-webkit-clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);}100%{-webkit-clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);}}</style><div data-testid="loader-wrapper" role="alert" aria-label="Loading" class="css-iakxqy"><style data-emotion="css 1760h0j animation-nuhrd4">.css-1760h0j{-webkit-animation:animation-nuhrd4 cubic-bezier(0, 0, 0.85, 1) 2s infinite alternate;animation:animation-nuhrd4 cubic-bezier(0, 0, 0.85, 1) 2s infinite alternate;will-change:clip-path;}@-webkit-keyframes animation-nuhrd4{0%,71%{-webkit-clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);}96%,100%{-webkit-clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);}}@keyframes animation-nuhrd4{0%,71%{-webkit-clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);}96%,100%{-webkit-clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);}}</style><div class="css-1760h0j"><style data-emotion="css 1jtprf9">.css-1jtprf9{-webkit-clip-path:polygon(-0.1% -10%, 169% 65%, -0.1% 139%);clip-path:polygon(-0.1% -10%, 169% 65%, -0.1% 139%);}</style><div class="css-1jtprf9"><style data-emotion="css 1gtule8">.css-1gtule8{display:block;stroke:#000820;overflow:visible;}</style><svg viewbox="0 0 2640 3444" width="50" class="css-1gtule8"><style data-emotion="css 14pk3de animation-6fl1zn">.css-14pk3de{-webkit-animation:animation-6fl1zn cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;animation:animation-6fl1zn cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;stroke-dasharray:9800;stroke-dashoffset:9800;will-change:stroke-dashoffset;}@-webkit-keyframes animation-6fl1zn{100%{stroke-dashoffset:0;}}@keyframes animation-6fl1zn{100%{stroke-dashoffset:0;}}</style><path d="M0 0 M2569 1056L143 2447V149l1175 673v1867l1248 715" fill="none" stroke-linejoin="round" stroke-width="300" class="css-14pk3de"/></svg></div></div></div></div><noscript></noscript></div></section></div></main><div class="exercise-footer"><style data-emotion="css 8uttuf">.css-8uttuf{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;width:100%;max-width:600px;list-style:none;margin:0;padding:0;gap:8px;}</style><ul data-cy="progress-container" class="css-8uttuf"><style data-emotion="css 149stfi">.css-149stfi{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;max-width:100px;}</style><li class="css-149stfi"><style data-emotion="css 46tute">.css-46tute{display:block;height:8px;border-radius:4px;background-color:rgba(48, 57, 105, 0.15);border-bottom:0;outline:0;}.css-46tute:focus-visible{box-shadow:0 0 0 2px #257DFE;}</style><a href="javascript:void(0)" data-testid="progress-indicator-item" class="css-46tute"><style data-emotion="css 1pw8nbl">.css-1pw8nbl{-webkit-transition:width 250ms linear;transition:width 250ms linear;height:8px;border-radius:4px;background-color:#5EB1FF;}</style><div style="width:0%" class="css-1pw8nbl"></div></a></li><li class="css-149stfi"><a href="javascript:void(0)" data-testid="progress-indicator-item" class="css-46tute"><div style="width:0%" class="css-1pw8nbl"></div></a></li><li class="css-149stfi"><a href="javascript:void(0)" data-testid="progress-indicator-item" class="css-46tute"><div style="width:0%" class="css-1pw8nbl"></div></a></li></ul></div></div></div><script>window.MathJax={options:{ignoreHtmlClass:"tex2jax_ignore",processHtmlClass:"tex2jax_process"},tex:{autoload:{color:[],colorV2:["color"]},packages:{"[+]":["noerrors"]}},loader:{load:["[tex]/noerrors"]}}</script><script src="/campus/mathjax@3/es5/tex-chtml.js" id="MathJax-script"></script><script>!function(e){function t(t){for(var n,o,f=t[0],d=t[1],u=t[2],i=0,s=[];i<f.length;i++)o=f[i],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&s.push(a[o][0]),a[o]=0;for(n in d)Object.prototype.hasOwnProperty.call(d,n)&&(e[n]=d[n]);for(l&&l(t);s.length;)s.shift()();return c.push.apply(c,u||[]),r()}function r(){for(var e,t=0;t<c.length;t++){for(var r=c[t],n=!0,o=1;o<r.length;o++){var d=r[o];0!==a[d]&&(n=!1)}n&&(c.splice(t--,1),e=f(f.s=r[0]))}return e}var n={},o={14:0},a={14:0},c=[];function f(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,f),r.l=!0,r.exports}f.e=function(e){var t=[];o[e]?t.push(o[e]):0!==o[e]&&{0:1,2:1,4:1,7:1,8:1,9:1,12:1,13:1,17:1,19:1,21:1}[e]&&t.push(o[e]=new Promise((function(t,r){for(var n="static/css/"+({6:"console-monaco",7:"dnde",8:"ee",9:"idee",11:"monaco",12:"pmce",13:"rde",15:"xterm"}[e]||e)+"."+{0:"5afce38d",1:"31d6cfe0",2:"4d201c8f",3:"31d6cfe0",4:"a014e8d0",5:"31d6cfe0",6:"31d6cfe0",7:"b5d0672e",8:"2bf50755",9:"f128b9fc",11:"31d6cfe0",12:"ac937383",13:"b7e9ddae",15:"31d6cfe0",17:"7e868283",18:"31d6cfe0",19:"c1ed7807",20:"31d6cfe0",21:"e16192f0",22:"31d6cfe0",23:"31d6cfe0",24:"31d6cfe0",25:"31d6cfe0",26:"31d6cfe0",27:"31d6cfe0",28:"31d6cfe0"}[e]+".chunk.css",a=f.p+n,c=document.getElementsByTagName("link"),d=0;d<c.length;d++){var u=(l=c[d]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(u===n||u===a))return t()}var i=document.getElementsByTagName("style");for(d=0;d<i.length;d++){var l;if((u=(l=i[d]).getAttribute("data-href"))===n||u===a)return t()}var s=document.createElement("link");s.rel="stylesheet",s.type="text/css",s.onload=t,s.onerror=function(t){var n=t&&t.target&&t.target.src||a,c=new Error("Loading CSS chunk "+e+" failed.\\n("+n+")");c.code="CSS_CHUNK_LOAD_FAILED",c.request=n,delete o[e],s.parentNode.removeChild(s),r(c)},s.href=a,document.getElementsByTagName("head")[0].appendChild(s)})).then((function(){o[e]=0})));var r=a[e];if(0!==r)if(r)t.push(r[2]);else{var n=new Promise((function(t,n){r=a[e]=[t,n]}));t.push(r[2]=n);var c,d=document.createElement("script");d.charset="utf-8",d.timeout=120,f.nc&&d.setAttribute("nonce",f.nc),d.src=function(e){return f.p+"static/js/"+({6:"console-monaco",7:"dnde",8:"ee",9:"idee",11:"monaco",12:"pmce",13:"rde",15:"xterm"}[e]||e)+"."+{0:"bb586404",1:"701877b3",2:"83f0ba47",3:"36bf8ad5",4:"b9582502",5:"60c4ca48",6:"09fdd926",7:"bd34c1ca",8:"24e9a997",9:"1ed30eff",11:"135b325a",12:"3ab72533",13:"9d1c546f",15:"5265a14e",17:"a6251051",18:"aa9d42c9",19:"014309be",20:"7f42018f",21:"ab8da041",22:"839604f0",23:"de714e32",24:"5a3f258d",25:"0718080e",26:"5204ca35",27:"c9b011b7",28:"1c1c01e3"}[e]+".chunk.js"}(e);var u=new Error;c=function(t){d.onerror=d.onload=null,clearTimeout(i);var r=a[e];if(0!==r){if(r){var n=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\\n("+n+": "+o+")",u.name="ChunkLoadError",u.type=n,u.request=o,r[1](u)}a[e]=void 0}};var i=setTimeout((function(){c({type:"timeout",target:d})}),12e4);d.onerror=d.onload=c,document.head.appendChild(d)}return Promise.all(t)},f.m=e,f.c=n,f.d=function(e,t,r){f.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},f.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},f.t=function(e,t){if(1&t&&(e=f(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(f.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)f.d(r,n,function(t){return e[t]}.bind(null,n));return r},f.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return f.d(t,"a",t),t},f.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.p="/campus/",f.oe=function(e){throw console.error(e),e};var d=this["webpackJsonpcampus-app-v2"]=this["webpackJsonpcampus-app-v2"]||[],u=d.push.bind(d);d.push=t,d=d.slice();for(var i=0;i<d.length;i++)t(d[i]);var l=u;r()}([])</script><script src="/campus/static/js/16.53f3a01c.chunk.js"></script><script src="/campus/static/js/main.3fd73f66.chunk.js"></script><script>(function(){var js = "window[\'__CF$cv$params\']={r:\'7f07dc966dfe05ef\'};_cpo=document.createElement(\'script\');_cpo.nonce=\'\',_cpo.src=\'/cdn-cgi/challenge-platform/scripts/invisible.js\',document.getElementsByTagName(\'head\')[0].appendChild(_cpo);";var _0xh = document.createElement(\'iframe\');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = \'absolute\';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = \'none\';_0xh.style.visibility = \'hidden\';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement(\'script\');_0xj.innerHTML = js;_0xi.getElementsByTagName(\'head\')[0].appendChild(_0xj);}}if (document.readyState !== \'loading\') {handler();} else if (window.addEventListener) {document.addEventListener(\'DOMContentLoaded\', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== \'loading\') {document.onreadystatechange = prev;handler();}};}})();</script></body></html>'
'''


# Import package
import requests

# Specify the url: url
url= "http://www.datacamp.com/teach/documentation"

# Packages the request, send the request and catch the response: r
r= requests.get(url)

# Extract the response: text
text= r.text

# Print the html
print(text)

'''
<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>DataCamp Help Center</title><meta property="og:title" content="DataCamp Help Center"/><meta name="twitter:title" content="DataCamp Help Center"/><meta property="og:description" content="DataCamp Help Center"/><meta name="twitter:description" content="DataCamp Help Center"/><meta name="description" content="DataCamp Help Center"/><meta property="og:type" content="website"/><meta name="robots" content="all"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link href="https://static.intercomassets.com/assets/educate/educate-favicon-64x64-at-2x-52016a3500a250d0b118c0a04ddd13b1a7364a27759483536dd1940bccdefc20.png" rel="shortcut icon" type="image/png"/><link rel="canonical" href="http://instructor-support.datacamp.com/en/"/><link rel="alternate" href="http://instructor-support.datacamp.com/en/" hrefLang="en"/><link rel="alternate" href="http://instructor-support.datacamp.com/en/" hrefLang="x-default"/><meta name="next-head-count" content="14"/><link nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" rel="preload" href="https://static.intercomassets.com/_next/static/css/dea600c2d7280d74.css" as="style"/><link nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" rel="stylesheet" href="https://static.intercomassets.com/_next/static/css/dea600c2d7280d74.css" data-n-g=""/><noscript data-n-css="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18="></noscript><script defer="" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" nomodule="" src="https://static.intercomassets.com/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script defer="" src="https://static.intercomassets.com/_next/static/chunks/501.98a6385d439739e0.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18="></script><script src="https://static.intercomassets.com/_next/static/chunks/webpack-265a68c271c359c6.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/chunks/framework-0d6ea1a7548c6e4f.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/chunks/main-4d7adc46bd32e5e5.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/chunks/pages/_app-74789f54eabe22ba.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/chunks/1243-0774b01f50628307.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/chunks/pages/%5BhelpCenterIdentifier%5D/%5Blocale%5D/landing-8e32a9ecea3773ea.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/ODsicVGzKIHclQqicQEAL/_buildManifest.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><script src="https://static.intercomassets.com/_next/static/ODsicVGzKIHclQqicQEAL/_ssgManifest.js" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=" defer=""></script><style id="__jsx-1311457928">:root{--body-bg: rgb(255, 255, 255);
--body-image: none;
--body-bg-rgb: 255, 255, 255;
--body-card-bg: rgb(255, 255, 255);
--body-border: rgb(230, 230, 230);
--body-primary-color: #1a1a1a;
--body-secondary-color: #737373;
--body-reaction-bg: rgb(242, 242, 242);
--body-toc-active-border: #737373;
--body-toc-inactive-border: #f2f2f2;
--body-toc-inactive-color: #737373;
--body-toc-active-font-weight: 400;
--body-table-border: rgb(204, 204, 204);
--body-color: hsl(0, 0%, 0%);
--footer-bg: rgb(255, 255, 255);
--footer-image: none;
--footer-color: hsl(211, 10%, 61%);
--header-bg: rgb(5, 25, 45);
--header-image: none;
--header-color: hsl(0, 0%, 100%);
--collection-card-bg: rgb(255, 255, 255);
--collection-card-image: none;
--collection-card-color: hsl(210, 80%, 10%);
--card-border-radius: 8px;
--primary-color: hsl(210, 80%, 10%);
--primary-color-alpha-10: hsla(210, 80%, 10%, 0.1);
--primary-color-alpha-60: hsla(210, 80%, 10%, 0.6);
--text-on-primary-color: #ffffff;}</style><style id="__jsx-1205114759">:root{--font-family-primary: system-ui, "Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";}</style><style id="__jsx-4083600305">:root{--font-family-secondary: system-ui, "Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";}</style><style id="__jsx-73269029ea53bf4f">.fade-background.jsx-73269029ea53bf4f{background:-webkit-radial-gradient(50%0%,333.38%100%,rgba(var(--body-bg-rgb),0)0%,rgba(var(--body-bg-rgb),.00925356)11.67%,rgba(var(--body-bg-rgb),.0337355)21.17%,rgba(var(--body-bg-rgb),.0718242)28.85%,rgba(var(--body-bg-rgb),.121898)35.03%,rgba(var(--body-bg-rgb),.182336)40.05%,rgba(var(--body-bg-rgb),.251516)44.25%,rgba(var(--body-bg-rgb),.327818)47.96%,rgba(var(--body-bg-rgb),.409618)51.51%,rgba(var(--body-bg-rgb),.495297)55.23%,rgba(var(--body-bg-rgb),.583232)59.47%,rgba(var(--body-bg-rgb),.671801)64.55%,rgba(var(--body-bg-rgb),.759385)70.81%,rgba(var(--body-bg-rgb),.84436)78.58%,rgba(var(--body-bg-rgb),.9551)88.2%,rgba(var(--body-bg-rgb),1)100%),var(--header-image),var(--header-bg);background:-moz-radial-gradient(50%0%,333.38%100%,rgba(var(--body-bg-rgb),0)0%,rgba(var(--body-bg-rgb),.00925356)11.67%,rgba(var(--body-bg-rgb),.0337355)21.17%,rgba(var(--body-bg-rgb),.0718242)28.85%,rgba(var(--body-bg-rgb),.121898)35.03%,rgba(var(--body-bg-rgb),.182336)40.05%,rgba(var(--body-bg-rgb),.251516)44.25%,rgba(var(--body-bg-rgb),.327818)47.96%,rgba(var(--body-bg-rgb),.409618)51.51%,rgba(var(--body-bg-rgb),.495297)55.23%,rgba(var(--body-bg-rgb),.583232)59.47%,rgba(var(--body-bg-rgb),.671801)64.55%,rgba(var(--body-bg-rgb),.759385)70.81%,rgba(var(--body-bg-rgb),.84436)78.58%,rgba(var(--body-bg-rgb),.9551)88.2%,rgba(var(--body-bg-rgb),1)100%),var(--header-image),var(--header-bg);background:-o-radial-gradient(50%0%,333.38%100%,rgba(var(--body-bg-rgb),0)0%,rgba(var(--body-bg-rgb),.00925356)11.67%,rgba(var(--body-bg-rgb),.0337355)21.17%,rgba(var(--body-bg-rgb),.0718242)28.85%,rgba(var(--body-bg-rgb),.121898)35.03%,rgba(var(--body-bg-rgb),.182336)40.05%,rgba(var(--body-bg-rgb),.251516)44.25%,rgba(var(--body-bg-rgb),.327818)47.96%,rgba(var(--body-bg-rgb),.409618)51.51%,rgba(var(--body-bg-rgb),.495297)55.23%,rgba(var(--body-bg-rgb),.583232)59.47%,rgba(var(--body-bg-rgb),.671801)64.55%,rgba(var(--body-bg-rgb),.759385)70.81%,rgba(var(--body-bg-rgb),.84436)78.58%,rgba(var(--body-bg-rgb),.9551)88.2%,rgba(var(--body-bg-rgb),1)100%),var(--header-image),var(--header-bg);background:radial-gradient(333.38%100%at 50%0%,rgba(var(--body-bg-rgb),0)0%,rgba(var(--body-bg-rgb),.00925356)11.67%,rgba(var(--body-bg-rgb),.0337355)21.17%,rgba(var(--body-bg-rgb),.0718242)28.85%,rgba(var(--body-bg-rgb),.121898)35.03%,rgba(var(--body-bg-rgb),.182336)40.05%,rgba(var(--body-bg-rgb),.251516)44.25%,rgba(var(--body-bg-rgb),.327818)47.96%,rgba(var(--body-bg-rgb),.409618)51.51%,rgba(var(--body-bg-rgb),.495297)55.23%,rgba(var(--body-bg-rgb),.583232)59.47%,rgba(var(--body-bg-rgb),.671801)64.55%,rgba(var(--body-bg-rgb),.759385)70.81%,rgba(var(--body-bg-rgb),.84436)78.58%,rgba(var(--body-bg-rgb),.9551)88.2%,rgba(var(--body-bg-rgb),1)100%),var(--header-image),var(--header-bg);-webkit-background-size:cover;-moz-background-size:cover;-o-background-size:cover;background-size:cover;background-position-x:center}</style></head><body><div id="__next"><main class=""><header id="header" data-testid="header" class="jsx-73269029ea53bf4f relative flex-none text-header-color mb-9 bg-header-bg bg-header-image bg-cover bg-center pb-9"><div dir="ltr" class="jsx-73269029ea53bf4f header__container flex grow basis-auto justify-center px-5 marker:shrink-0 sm:px-10 o__ltr"><section class="jsx-73269029ea53bf4f relative w-240"><div class="jsx-73269029ea53bf4f header__meta_wrapper mt-6 flex items-center leading-none mb-12"><div class="jsx-73269029ea53bf4f mo__body header__site_name"><div class="jsx-73269029ea53bf4f header__logo"><a href="/en/" class="jsx-73269029ea53bf4f"><img src="https://downloads.intercomcdn.com/i/o/234883/40f8e46c9f274fdca29bbe60/d9ad589cf6aa9f0144093bff0c910a4c.png" height="150" alt="DataCamp Help Center"/></a></div></div><div class="jsx-73269029ea53bf4f"><div class="jsx-73269029ea53bf4f flex items-center font-semibold"><div class="flex items-center text-black md:hidden" data-testid="small-screen-children"><button class="flex items-center border-none bg-transparent px-1.5 text-header-color" data-testid="hamburger-menu-button" aria-label="Open menu"><svg width="24" height="24" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" class="fill-current"><path d="M1.86861 2C1.38889 2 1 2.3806 1 2.85008C1 3.31957 1.38889 3.70017 1.86861 3.70017H14.1314C14.6111 3.70017 15 3.31957 15 2.85008C15 2.3806 14.6111 2 14.1314 2H1.86861Z"></path><path d="M1 8C1 7.53051 1.38889 7.14992 1.86861 7.14992H14.1314C14.6111 7.14992 15 7.53051 15 8C15 8.46949 14.6111 8.85008 14.1314 8.85008H1.86861C1.38889 8.85008 1 8.46949 1 8Z"></path><path d="M1 13.1499C1 12.6804 1.38889 12.2998 1.86861 12.2998H14.1314C14.6111 12.2998 15 12.6804 15 13.1499C15 13.6194 14.6111 14 14.1314 14H1.86861C1.38889 14 1 13.6194 1 13.1499Z"></path></svg></button><div class="fixed right-0 top-0 z-50 h-full w-full hidden" data-testid="hamburger-menu"><div class="flex h-full w-full justify-end bg-black bg-opacity-30"><div class="flex h-fit w-full flex-col bg-white opacity-100 sm:h-full sm:w-1/2"><button class="text-body-font flex items-center self-end border-none bg-transparent pr-6 pt-15" data-testid="hamburger-menu-close-button" aria-label="Close menu"><svg width="24" height="24" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" class="fill-primary"><path d="M3.5097 3.5097C3.84165 3.17776 4.37984 3.17776 4.71178 3.5097L7.99983 6.79775L11.2879 3.5097C11.6198 3.17776 12.158 3.17776 12.49 3.5097C12.8219 3.84165 12.8219 4.37984 12.49 4.71178L9.20191 7.99983L12.49 11.2879C12.8219 11.6198 12.8219 12.158 12.49 12.49C12.158 12.8219 11.6198 12.8219 11.2879 12.49L7.99983 9.20191L4.71178 12.49C4.37984 12.8219 3.84165 12.8219 3.5097 12.49C3.17776 12.158 3.17776 11.6198 3.5097 11.2879L6.79775 7.99983L3.5097 4.71178C3.17776 4.37984 3.17776 3.84165 3.5097 3.5097Z"></path></svg></button><nav class="flex flex-col pl-4 text-black"><a target="_blank" rel="noopener noreferrer" href="http://www.datacamp.com/teach" class="mx-5 mb-5 text-md no-underline hover:opacity-80 md:mx-3 md:my-0 md:text-base" data-testid="header-link-default"><span>Go to DataCamp -</span></a><div class="relative cursor-pointer"><select class="peer absolute z-10 block h-6 w-full cursor-pointer opacity-0 md:text-base"><option value="/en/" class="text-black" selected="">English</option>;</select><div class="mb-10 ml-5 flex items-center gap-1 text-md hover:opacity-80 peer-hover:opacity-80 md:m-0 md:ml-3 md:text-base"><svg id="locale-picker-globe" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="shrink-0"><path d="M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M8 15C9.39949 15 10.534 11.866 10.534 8C10.534 4.13401 9.39949 1 8 1C6.60051 1 5.466 4.13401 5.466 8C5.466 11.866 6.60051 15 8 15Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1.448 5.75989H14.524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1.448 10.2402H14.524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg>English<svg id="locale-picker-arrow" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="shrink-0"><path d="M5 6.5L8.00093 9.5L11 6.50187" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></nav></div></div></div></div><nav class="hidden items-center md:flex" data-testid="large-screen-children"><a target="_blank" rel="noopener noreferrer" href="http://www.datacamp.com/teach" class="mx-5 mb-5 text-md no-underline hover:opacity-80 md:mx-3 md:my-0 md:text-base" data-testid="header-link-default"><span>Go to DataCamp -</span></a><div class="relative cursor-pointer"><select class="peer absolute z-10 block h-6 w-full cursor-pointer opacity-0 md:text-base"><option value="/en/" class="text-black" selected="">English</option>;</select><div class="mb-10 ml-5 flex items-center gap-1 text-md hover:opacity-80 peer-hover:opacity-80 md:m-0 md:ml-3 md:text-base"><svg id="locale-picker-globe" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="shrink-0"><path d="M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M8 15C9.39949 15 10.534 11.866 10.534 8C10.534 4.13401 9.39949 1 8 1C6.60051 1 5.466 4.13401 5.466 8C5.466 11.866 6.60051 15 8 15Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1.448 5.75989H14.524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1.448 10.2402H14.524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg>English<svg id="locale-picker-arrow" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="shrink-0"><path d="M5 6.5L8.00093 9.5L11 6.50187" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></nav></div></div></div><h1 class="jsx-73269029ea53bf4f text-7 mb-6 text-welcome-message font-bold text-header-color">Advice and answers from the DataCamp - Team</h1><div><form action="/en/" autoComplete="off" class=""><div class="relative flex"><input type="text" autoComplete="off" class="peer w-full rounded-2xl border border-black-alpha-8 bg-white-alpha-20 p-4 pl-12 font-sans text-lg text-header-color shadow-search-bar outline-none transition ease-linear placeholder:text-header-color hover:bg-white-alpha-27 hover:shadow-search-bar-hover focus:border-transparent focus:bg-white focus:text-black-10 focus:shadow-search-bar-focused placeholder:focus:text-black-45 o__ltr" placeholder="Search for articles..." name="q" value=""/><div class="pointer-events-none absolute inset-y-0 left-0 flex items-center fill-header-color pl-4 peer-focus-visible:fill-black-45"><svg width="22" height="21" viewBox="0 0 22 21" xmlns="http://www.w3.org/2000/svg" class="fill-inherit"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.27485 8.7001C3.27485 5.42781 5.92757 2.7751 9.19985 2.7751C12.4721 2.7751 15.1249 5.42781 15.1249 8.7001C15.1249 11.9724 12.4721 14.6251 9.19985 14.6251C5.92757 14.6251 3.27485 11.9724 3.27485 8.7001ZM9.19985 0.225098C4.51924 0.225098 0.724854 4.01948 0.724854 8.7001C0.724854 13.3807 4.51924 17.1751 9.19985 17.1751C11.0802 17.1751 12.8176 16.5627 14.2234 15.5265L19.0981 20.4013C19.5961 20.8992 20.4033 20.8992 20.9013 20.4013C21.3992 19.9033 21.3992 19.0961 20.9013 18.5981L16.0264 13.7233C17.0625 12.3176 17.6749 10.5804 17.6749 8.7001C17.6749 4.01948 13.8805 0.225098 9.19985 0.225098Z"></path></svg></div></div></form></div></section></div></header><div class="z-1 flex shrink-0 grow basis-auto justify-center px-5 sm:px-10"><section data-testid="main-content" class="max-w-full w-240"><section data-testid="landing-section"><div class="flex flex-col gap-12" dir="ltr"><div class="grid auto-rows-auto gap-x-4 sm:gap-x-6 gap-y-4 sm:gap-y-6 md:grid-cols-1"><div dir="ltr" id="getting-started" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1256585-getting-started" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1256585" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:chat-star/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Getting Started</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know to begin your DataCamp journey!</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG" alt="Yashas Roy avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Yashas and 1 other</span><span class="inline sm:hidden">2 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>6 articles</span></div></div></div></div></a></div><div dir="ltr" id="courses" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1256578-courses" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1256578" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:devices-laptop/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Courses</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know about creating DataCamp courses.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG" alt="Yashas Roy avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG" alt="Richie Cotton avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-2"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy and 9 others</span><span class="inline sm:hidden">10 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>77 articles</span></div></div></div></div></a></div><div dir="ltr" id="projects" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1256569-projects" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1256569" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:book-opened2/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Projects</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know about creating DataCamp projects.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/5197983/square_128/George_Boorman_Photo-1641317786.jpg" alt="George Boorman avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg" alt="Jess Ahmet avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By George and 1 other</span><span class="inline sm:hidden">2 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>12 articles</span></div></div></div></div></a></div><div dir="ltr" id="course-editor-basics" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1256556-course-editor-basics" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1256556" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:book-bookmark/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Course Editor Basics</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know to get going with our online course editor.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy</span><span class="inline sm:hidden">1 author</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>5 articles</span></div></div></div></div></a></div><div dir="ltr" id="live-courses-and-maintenance" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/2184250-live-courses-and-maintenance" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-2184250" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:book-bookmark/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Live Courses and Maintenance </h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know about maintaining your Live Content on DataCamp</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy</span><span class="inline sm:hidden">1 author</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>25 articles</span></div></div></div></div></a></div><div dir="ltr" id="instructor-advisory-board" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/2052717-instructor-advisory-board" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-2052717" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:chat-star/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Instructor Advisory Board</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Learn more about the DataCamp Instructor Advisory Board</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy</span><span class="inline sm:hidden">1 author</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>2 articles</span></div></div></div></div></a></div><div dir="ltr" id="tips-tricks" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1335793-tips-tricks" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1335793" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:comms-mail/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Tips &amp; Tricks</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Become a DataCamp wizard!</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/4685159/square_128/20210323_102554-1621516779.jpg" alt="James Chapman avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg" alt="Jess Ahmet avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-2"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy and 2 others</span><span class="inline sm:hidden">3 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>6 articles</span></div></div></div></div></a></div><div dir="ltr" id="frequently-asked-questions-faq" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1256565-frequently-asked-questions-faq" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1256565" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:chat-question/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Frequently Asked Questions (FAQ)</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Common questions that arise during content creation.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG" alt="Richie Cotton avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5197983/square_128/George_Boorman_Photo-1641317786.jpg" alt="George Boorman avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-2"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy and 4 others</span><span class="inline sm:hidden">5 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>36 articles</span></div></div></div></div></a></div><div dir="ltr" id="miscellaneous" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/1340920-miscellaneous" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-1340920" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:tools-edit/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Miscellaneous</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Have a question for DataCamp, but not about creating content? You&#x27;ll probably find the answer here.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg" alt="Amy Peterson avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/2830289/square_128/IMG_0665_a-1545331304.jpg" alt="Lisa Monteleone avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5547433/square_128/myprofilephoto-1675244474.jpeg" alt="Jasmin Ludolf avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-2"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Amy and 2 others</span><span class="inline sm:hidden">3 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>8 articles</span></div></div></div></div></a></div><div dir="ltr" id="business-intelligence-courses" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/3062031-business-intelligence-courses" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-3062031" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:devices-window/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Business Intelligence Courses</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know as a Subject Matter Expert creating a BI course.</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><img width="24" height="24" src="https://static.intercomassets.com/avatars/5122901/square_128/Carl_Portrait-1628240564.jpg" alt="Carl Rosseel avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg" alt="Jess Ahmet avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-3"/><img width="24" height="24" src="https://static.intercomassets.com/avatars/5142579/square_128/maarten-profile2-1631542746.jpeg" alt="Maarten Van den Broeck avatar" class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex -ml-1.5 h-6 w-6 z-2"/></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Carl and 4 others</span><span class="inline sm:hidden">5 authors</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>22 articles</span></div></div></div></div></a></div><div dir="ltr" id="assessments" class="flex"><a href="http://instructor-support.datacamp.com/en/collections/3462146-assessments" class="collection-link group/collection-summary flex grow overflow-hidden rounded-card border border-solid border-body-border bg-body-card-bg no-underline shadow-sm transition ease-linear hover:border-primary-alpha-60"><div class="o__ltr flex grow flex-row flex-col p-5 sm:flex-row sm:p-5"><div class="flex items-center"><div id="collection-icon-3462146" class="flex items-center rounded-card bg-cover stroke-collection-card-color text-collection-card-color justify-start mb-4 h-10 w-10 sm:mb-0 sm:h-[86px] sm:w-[86px] sm:justify-center sm:pb-0" data-test-collection-photo="true"><div class="h-7 w-7 sm:h-10 sm:w-10"><img src="http://instructor-support.datacamp.com/assets/svg/icon:tools-compose/05192D" alt="" width="100%" height="100%" loading="lazy"/></div></div></div><div class="intercom-force-break flex w-full flex-1 flex-col text-body-primary-color max-w-oneColWidth justify-center sm:pl-5" dir="ltr"><div><h3 class="-mt-1 mb-0.5 line-clamp-2 text-md font-semibold leading-normal text-body-primary-color transition ease-linear group-hover/collection-summary:text-primary sm:line-clamp-1" data-testid="collection-name">Assessments</h3><p class="mb-0 mt-0 line-clamp-3 text-md sm:line-clamp-1">Everything you need to know about creating DataCamp Assessment Items</p></div><div class="mt-3"><div class="flex gap-2"><div class="flex flex-row"><div class="flex shrink-0 flex-col items-center justify-center rounded-full leading-normal sm:flex-row o__ltr" data-testid="avatars"><span class="inline-flex items-center justify-center rounded-full bg-primary text-lg font-bold leading-6 text-primary-text shadow-solid-2 shadow-body-bg [&amp;:nth-child(n+2)]:hidden lg:[&amp;:nth-child(n+2)]:inline-flex h-6 w-6 z-4"><span class="">A</span></span></div></div><span class="line-clamp-1 flex flex-row items-center text-base text-body-secondary-color"><span class="hidden sm:inline">By Aimée</span><span class="inline sm:hidden">1 author</span><svg width="4" height="4" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="m-2"><path d="M15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8Z"></path></svg>16 articles</span></div></div></div></div></a></div></div></div></section></section></div><footer id="footer" class="footer bg-footer-bg text-footer-color"><div class="shrink-0 grow basis-auto px-5 sm:px-10"><div class="content"><div dir="ltr"><div class="footer__logo text-footer-color"><a href="/en/"><img data-testid="logo-img" src="https://downloads.intercomcdn.com/i/o/234883/40f8e46c9f274fdca29bbe60/d9ad589cf6aa9f0144093bff0c910a4c.png" alt="DataCamp Help Center" class="inline"/></a></div><div class="flex items-center justify-center text-center text-sm"><svg width="14" height="14" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><title>Intercom</title><g clip-path="url(#clip0_1870_86937)"><path d="M14 0H2C0.895 0 0 0.895 0 2V14C0 15.105 0.895 16 2 16H14C15.105 16 16 15.105 16 14V2C16 0.895 15.105 0 14 0ZM10.133 3.02C10.133 2.727 10.373 2.49 10.667 2.49C10.961 2.49 11.2 2.727 11.2 3.02V10.134C11.2 10.428 10.96 10.667 10.667 10.667C10.372 10.667 10.133 10.427 10.133 10.134V3.02ZM7.467 2.672C7.467 2.375 7.705 2.132 8 2.132C8.294 2.132 8.533 2.375 8.533 2.672V10.484C8.533 10.781 8.293 11.022 8 11.022C7.705 11.022 7.467 10.782 7.467 10.484V2.672ZM4.8 3.022C4.8 2.727 5.04 2.489 5.333 2.489C5.628 2.489 5.867 2.726 5.867 3.019V10.133C5.867 10.427 5.627 10.666 5.333 10.666C5.039 10.666 4.8 10.426 4.8 10.133V3.02V3.022ZM2.133 4.088C2.133 3.792 2.373 3.554 2.667 3.554C2.961 3.554 3.2 3.792 3.2 4.087V8.887C3.2 9.18 2.96 9.419 2.667 9.419C2.372 9.419 2.133 9.179 2.133 8.886V4.086V4.088ZM13.68 12.136C13.598 12.206 11.622 13.866 8 13.866C4.378 13.866 2.402 12.206 2.32 12.136C2.096 11.946 2.07 11.608 2.262 11.384C2.452 11.161 2.789 11.134 3.012 11.324C3.044 11.355 4.808 12.8 8 12.8C11.232 12.8 12.97 11.343 12.986 11.328C13.209 11.138 13.546 11.163 13.738 11.386C13.93 11.61 13.904 11.946 13.68 12.138V12.136ZM13.867 8.886C13.867 9.181 13.627 9.42 13.333 9.42C13.039 9.42 12.8 9.18 12.8 8.887V4.087C12.8 3.791 13.04 3.553 13.333 3.553C13.628 3.553 13.867 3.791 13.867 4.086V8.886Z" class="fill-current"></path></g><defs><clipPath id="clip0_1870_86937"><rect width="16" height="16" fill="none"></rect></clipPath></defs></svg><a href="https://www.intercom.com/intercom-link?company=DataCamp+-&amp;solution=customer-support&amp;utm_campaign=intercom-link&amp;utm_content=We+run+on+Intercom&amp;utm_medium=help-center&amp;utm_referrer=http%3A%2F%2Finstructor-support.datacamp.com%2Fen&amp;utm_source=desktop-web" class="pl-2 align-middle no-underline">We run on Intercom</a></div></div></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json" nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=">{"props":{"pageProps":{"app":{"id":"ug0ps1rq","messengerUrl":"https://widget.intercom.io/widget/ug0ps1rq","name":"DataCamp -","poweredByIntercomUrl":"https://www.intercom.com/intercom-link?company=DataCamp+-\u0026solution=customer-support\u0026utm_campaign=intercom-link\u0026utm_content=We+run+on+Intercom\u0026utm_medium=help-center\u0026utm_referrer=http%3A%2F%2Finstructor-support.datacamp.com%2Fen\u0026utm_source=desktop-web","features":{"collectionPageSingleColumn":true,"ticketsPortal":false,"tocAutoScroll":true,"customNotFoundErrorMessage":false,"fontPicker":true}},"helpCenterSite":{"customDomain":"instructor-support.datacamp.com","defaultLocale":"en","disableBranding":false,"externalLoginName":null,"externalLoginUrl":null,"footerContactDetails":null,"footerLinks":{"custom":[],"social":[]},"headerLinks":[],"homeCollectionCols":1,"googleAnalyticsTrackingId":"G-ZQC8MTTK7L","googleTagManagerId":null,"pathPrefixForCustomDomain":null,"seoIndexingEnabled":true,"helpCenterId":648388},"localeLinks":[{"id":"en","absoluteUrl":"http://instructor-support.datacamp.com/en/","available":true,"name":"English","selected":true,"url":"/en/"}],"requestContext":{"articleSource":null,"canonicalUrl":"http://instructor-support.datacamp.com/en/","headerless":false,"isDefaultDomainRequest":false,"nonce":"uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=","rootUrl":"/en/","sheetUserCipher":null,"type":"help-center"},"theme":{"color":"05192D","siteName":"DataCamp Help Center","headline":"","headerFontColor":"FFFFFF","logo":"https://downloads.intercomcdn.com/i/o/234883/40f8e46c9f274fdca29bbe60/d9ad589cf6aa9f0144093bff0c910a4c.png","logoHeight":"150","header":null,"favicon":"https://static.intercomassets.com/assets/educate/educate-favicon-64x64-at-2x-52016a3500a250d0b118c0a04ddd13b1a7364a27759483536dd1940bccdefc20.png","locale":"en","homeUrl":"http://www.datacamp.com/teach","social":null,"urlPrefixForDefaultDomain":"https://intercom.help/datacamp-teach","customDomain":"instructor-support.datacamp.com","customDomainUsesSsl":false,"customizationOptions":{"customizationType":1,"header":{"backgroundColor":"#05192D","fontColor":"#FFFFFF","fadeToEdge":false,"backgroundGradient":null,"backgroundImageId":null,"backgroundImageUrl":null},"body":{"backgroundColor":null,"fontColor":null,"fadeToEdge":null,"backgroundGradient":null,"backgroundImageId":null},"footer":{"backgroundColor":null,"fontColor":null,"fadeToEdge":null,"backgroundGradient":null,"backgroundImageId":null},"layout":{"homePage":{"blocks":[{"type":"collection-list","columns":1}]},"collectionsPage":{"showArticleDescriptions":false},"articlePage":{},"searchPage":{}},"collectionCard":{"global":{"backgroundColor":null,"fontColor":null,"fadeToEdge":null,"backgroundGradient":null,"backgroundImageId":null,"backgroundImageUrl":null},"collections":null},"global":{"font":{"primary":null,"secondary":null},"componentStyle":{"card":{"type":null,"borderRadius":null}}}}},"user":{"userId":"e17d59e1-f04d-4e4c-9e72-dd2afad34343","role":"visitor_role"},"home":{"collections":[{"articleCount":6,"authorCount":2,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG","name":"Yashas Roy","first_name":"Yashas","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"}],"description":"Everything you need to know to begin your DataCamp journey!","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:chat-star","id":"1256585","name":"Getting Started","slug":"getting-started","url":"http://instructor-support.datacamp.com/en/collections/1256585-getting-started"},{"articleCount":77,"authorCount":10,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG","name":"Yashas Roy","first_name":"Yashas","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG","name":"Richie Cotton","first_name":"Richie","avatar_shape":"circle"}],"description":"Everything you need to know about creating DataCamp courses.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:devices-laptop","id":"1256578","name":"Courses","slug":"courses","url":"http://instructor-support.datacamp.com/en/collections/1256578-courses"},{"articleCount":12,"authorCount":2,"authors":[{"avatar":"https://static.intercomassets.com/avatars/5197983/square_128/George_Boorman_Photo-1641317786.jpg","name":"George Boorman","first_name":"George","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg","name":"Jess Ahmet","first_name":"Jess","avatar_shape":"circle"}],"description":"Everything you need to know about creating DataCamp projects.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:book-opened2","id":"1256569","name":"Projects","slug":"projects","url":"http://instructor-support.datacamp.com/en/collections/1256569-projects"},{"articleCount":5,"authorCount":1,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"}],"description":"Everything you need to know to get going with our online course editor.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:book-bookmark","id":"1256556","name":"Course Editor Basics","slug":"course-editor-basics","url":"http://instructor-support.datacamp.com/en/collections/1256556-course-editor-basics"},{"articleCount":25,"authorCount":1,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"}],"description":"Everything you need to know about maintaining your Live Content on DataCamp","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:book-bookmark","id":"2184250","name":"Live Courses and Maintenance ","slug":"live-courses-and-maintenance","url":"http://instructor-support.datacamp.com/en/collections/2184250-live-courses-and-maintenance"},{"articleCount":2,"authorCount":1,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"}],"description":"Learn more about the DataCamp Instructor Advisory Board","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:chat-star","id":"2052717","name":"Instructor Advisory Board","slug":"instructor-advisory-board","url":"http://instructor-support.datacamp.com/en/collections/2052717-instructor-advisory-board"},{"articleCount":6,"authorCount":3,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/4685159/square_128/20210323_102554-1621516779.jpg","name":"James Chapman","first_name":"James","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg","name":"Jess Ahmet","first_name":"Jess","avatar_shape":"circle"}],"description":"Become a DataCamp wizard!","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:comms-mail","id":"1335793","name":"Tips \u0026 Tricks","slug":"tips-tricks","url":"http://instructor-support.datacamp.com/en/collections/1335793-tips-tricks"},{"articleCount":36,"authorCount":5,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG","name":"Richie Cotton","first_name":"Richie","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5197983/square_128/George_Boorman_Photo-1641317786.jpg","name":"George Boorman","first_name":"George","avatar_shape":"circle"}],"description":"Common questions that arise during content creation.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:chat-question","id":"1256565","name":"Frequently Asked Questions (FAQ)","slug":"frequently-asked-questions-faq","url":"http://instructor-support.datacamp.com/en/collections/1256565-frequently-asked-questions-faq"},{"articleCount":8,"authorCount":3,"authors":[{"avatar":"https://static.intercomassets.com/avatars/2678765/square_128/peterson-1539265042.jpg","name":"Amy Peterson","first_name":"Amy","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/2830289/square_128/IMG_0665_a-1545331304.jpg","name":"Lisa Monteleone","first_name":"Lisa","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5547433/square_128/myprofilephoto-1675244474.jpeg","name":"Jasmin Ludolf","first_name":"Jasmin","avatar_shape":"circle"}],"description":"Have a question for DataCamp, but not about creating content? You'll probably find the answer here.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:tools-edit","id":"1340920","name":"Miscellaneous","slug":"miscellaneous","url":"http://instructor-support.datacamp.com/en/collections/1340920-miscellaneous"},{"articleCount":22,"authorCount":5,"authors":[{"avatar":"https://static.intercomassets.com/avatars/5122901/square_128/Carl_Portrait-1628240564.jpg","name":"Carl Rosseel","first_name":"Carl","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5484264/square_128/Profile-1662119199.jpeg","name":"Jess Ahmet","first_name":"Jess","avatar_shape":"circle"},{"avatar":"https://static.intercomassets.com/avatars/5142579/square_128/maarten-profile2-1631542746.jpeg","name":"Maarten Van den Broeck","first_name":"Maarten","avatar_shape":"circle"}],"description":"Everything you need to know as a Subject Matter Expert creating a BI course.","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:devices-window","id":"3062031","name":"Business Intelligence Courses","slug":"business-intelligence-courses","url":"http://instructor-support.datacamp.com/en/collections/3062031-business-intelligence-courses"},{"articleCount":16,"authorCount":1,"authors":[{"avatar":null,"name":"Aimée Gott","first_name":"Aimée","avatar_shape":"circle"}],"description":"Everything you need to know about creating DataCamp Assessment Items","iconContentType":"image/svg+xml","iconUrl":"http://instructor-support.datacamp.com/assets/svg/icon:tools-compose","id":"3462146","name":"Assessments","slug":"assessments","url":"http://instructor-support.datacamp.com/en/collections/3462146-assessments"}],"layout":{"blocks":[{"type":"collection-list","columns":1}]}},"themeCSSCustomProperties":{"--body-bg":"rgb(255, 255, 255)","--body-image":"none","--body-bg-rgb":"255, 255, 255","--body-card-bg":"rgb(255, 255, 255)","--body-border":"rgb(230, 230, 230)","--body-primary-color":"#1a1a1a","--body-secondary-color":"#737373","--body-reaction-bg":"rgb(242, 242, 242)","--body-toc-active-border":"#737373","--body-toc-inactive-border":"#f2f2f2","--body-toc-inactive-color":"#737373","--body-toc-active-font-weight":400,"--body-table-border":"rgb(204, 204, 204)","--body-color":"hsl(0, 0%, 0%)","--footer-bg":"rgb(255, 255, 255)","--footer-image":"none","--footer-color":"hsl(211, 10%, 61%)","--header-bg":"rgb(5, 25, 45)","--header-image":"none","--header-color":"hsl(0, 0%, 100%)","--collection-card-bg":"rgb(255, 255, 255)","--collection-card-image":"none","--collection-card-color":"hsl(210, 80%, 10%)","--card-border-radius":"8px","--primary-color":"hsl(210, 80%, 10%)","--primary-color-alpha-10":"hsla(210, 80%, 10%, 0.1)","--primary-color-alpha-60":"hsla(210, 80%, 10%, 0.6)","--text-on-primary-color":"#ffffff"},"intl":{"defaultLocale":"en","locale":"en","messages":{"article.attachment_icon":"Attachment icon","article.related_articles":"Related Articles","article.written_by":"Written by \u003cb\u003e{author}\u003c/b\u003e","article.table_of_contents":"Table of contents","breadcrumb.all_collections":"All Collections","collection.article_count.one":"{count} article","collection.article_count.other":"{count} articles","collection.articles_heading":"Articles","collection.sections_heading":"Collections","collection.written_by.one":"Written by \u003cb\u003e{author}\u003c/b\u003e","collection.written_by.two":"Written by \u003cb\u003e{author1}\u003c/b\u003e and \u003cb\u003e{author2}\u003c/b\u003e","collection.written_by.three":"Written by \u003cb\u003e{author1}\u003c/b\u003e, \u003cb\u003e{author2}\u003c/b\u003e and \u003cb\u003e{author3}\u003c/b\u003e","collection.written_by.four":"Written by \u003cb\u003e{author1}\u003c/b\u003e, \u003cb\u003e{author2}\u003c/b\u003e, \u003cb\u003e{author3}\u003c/b\u003e and 1 other","collection.written_by.other":"Written by \u003cb\u003e{author1}\u003c/b\u003e, \u003cb\u003e{author2}\u003c/b\u003e, \u003cb\u003e{author3}\u003c/b\u003e and {count} others","collection.by.one":"By {author}","collection.by.two":"By {author1} and 1 other","collection.by.other":"By {author1} and {count} others","collection.by.count_one":"1 author","collection.by.count_plural":"{count} authors","community_banner.tip":"Tip","community_banner.label":"\u003cb\u003eNeed more help?\u003c/b\u003e Get support from our {link}","community_banner.link_label":"Community Forum","community_banner.description":"Find answers and get help from Intercom Support and Community Experts","header.go_to":"Go to {appName}","header.headline":"Advice and answers from the {appName} Team","header.menu.open":"Open menu","header.menu.close":"Close menu","not_authorized.cta":"You can try sending us a message or logging in at {link}","not_found.title":"Uh oh. That page doesn’t exist.","not_found.not_here":"That page isn’t here anymore","not_found.try_searching":"Try searching for your answer","not_found.send_a_message":"Or just send us a message","no_articles.title":"Empty Help Center","no_articles.no_articles":"This Help Center doesn't have any articles or collections yet.","preview.invalid_preview":"There is no preview available for {previewType}","reaction_picker.did_this_answer_your_question":"Did this answer your question?","reaction_picker.reaction.disappointed.title":"Disappointed","reaction_picker.reaction.disappointed.aria_label":"Disappointed Reaction","reaction_picker.reaction.neutral.title":"Neutral","reaction_picker.reaction.neutral.aria_label":"Neutral Reaction","reaction_picker.reaction.smiley.title":"Smiley","reaction_picker.reaction.smiley.aria_label":"Smiley Reaction","search.box_placeholder":"Search for articles...","search.no_results":"We couldn't find any articles for:","search.clear_search":"Clear search query","search.successful":"Search results for:","search.submit_btn":"Search for articles","footer.powered_by":"We run on Intercom","footer.social.facebook":"Facebook","footer.social.linkedin":"LinkedIn","footer.social.twitter":"Twitter","tickets.title":"Tickets","tickets.company_selector_option":"{companyName}’s tickets","tickets.no_tickets_found":"No tickets found","tickets.unassigned":"Unassigned","tickets.back_to_all_tickets":"Back to all tickets","tickets.view_conversation":"View conversation","tickets.send_message":"Send us a message","tickets.continue_conversation":"Continue the conversation","tickets.avatar_image.image_alt":"{firstName}’s avatar","tickets.fields.id":"Ticket ID","tickets.fields.type":"Ticket type","tickets.fields.title":"Title","tickets.fields.description":"Description","tickets.fields.created_by":"Created by","tickets.fields.email_for_notification":"You will be notified here and by email","tickets.fields.created_at":"Creation date","tickets.fields.state":"Ticket state","tickets.fields.assignee":"Assignee","tickets.states.submitted":"Submitted","tickets.states.in_progress":"In progress","tickets.states.waiting_on_customer":"Waiting on you","tickets.states.resolved":"Resolved","tickets.states.description.unassigned.submitted":"We will pick this up soon","tickets.states.description.assigned.submitted":"{assigneeName} will pick this up soon","tickets.states.description.unassigned.in_progress":"We are working on this!","tickets.states.description.assigned.in_progress":"{assigneeName} is working on this!","tickets.states.description.unassigned.waiting_on_customer":"We need more information from you","tickets.states.description.assigned.waiting_on_customer":"{assigneeName} needs more information from you","tickets.states.description.unassigned.resolved":"We have completed your ticket","tickets.states.description.assigned.resolved":"{assigneeName} has completed your ticket","tickets.attributes.boolean.true":"Yes","tickets.attributes.boolean.false":"No"}},"collectionCardCustomProperties":{},"_sentryTraceData":"210fa0b41e1a4ec6a57bfb89a501fa5d-b3373d97ed7dba49-0","_sentryBaggage":"sentry-environment=production,sentry-release=ODsicVGzKIHclQqicQEAL,sentry-public_key=187f842308a64dea9f1f64d4b1b9c298,sentry-trace_id=210fa0b41e1a4ec6a57bfb89a501fa5d"},"__N_SSP":true},"page":"/[helpCenterIdentifier]/[locale]/landing","query":{"helpCenterIdentifier":"datacamp-teach","locale":"en"},"buildId":"ODsicVGzKIHclQqicQEAL","assetPrefix":"https://static.intercomassets.com","isFallback":false,"dynamicIds":[501],"gssp":true,"scriptLoader":[]}</script><script nonce="uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=">(function(){var js = "window['__CF$cv$params']={r:'7f07dfd9eaf35824'};_cpo=document.createElement('script');_cpo.nonce='uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=',_cpo.src='/cdn-cgi/challenge-platform/scripts/invisible.js',document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = 'uXnDZj+J7dqomeKQRjk9hNVuWSOB7DS7MlSfamDkv18=';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body></html>

'''


# Import packages
import requests
from bs4 import BeautifulSoup

# Specify url: url
url = 'https://www.python.org/~guido/'

# Package the request, send the request and catch the response: r
r= requests.get(url)

# Extracts the response as html: html_doc
html_doc= r.text

# Create a BeautifulSoup object from the HTML: soup
soup= BeautifulSoup(html_doc)

# Prettify the BeautifulSoup object: pretty_soup
pretty_soup= soup.prettify()

# Print the response
print(pretty_soup)

'''
<html>
 <head>
  <title>
   Guido's Personal Home Page
  </title>
 </head>
 <body bgcolor="#FFFFFF" text="#000000">
  <!-- Built from main -->
  <h1>
   <a href="pics.html">
    <img border="0" src="images/IMG_2192.jpg"/>
   </a>
   Guido van Rossum - Personal Home Page
   <a href="pics.html">
    <img border="0" height="216" src="images/guido-headshot-2019.jpg" width="270"/>
   </a>
  </h1>
  <p>
   <a href="http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm">
    <i>
     "Gawky and proud of it."
    </i>
   </a>
   <h3>
    <a href="images/df20000406.jpg">
     Who I Am
    </a>
   </h3>
   <p>
    Read
my
    <a href="http://neopythonic.blogspot.com/2016/04/kings-day-speech.html">
     "King's
Day Speech"
    </a>
    for some inspiration.
    <p>
     I am the author of the
     <a href="http://www.python.org">
      Python
     </a>
     programming language.  See also my
     <a href="Resume.html">
      resume
     </a>
     and my
     <a href="Publications.html">
      publications list
     </a>
     , a
     <a href="bio.html">
      brief bio
     </a>
     , assorted
     <a href="http://legacy.python.org/doc/essays/">
      writings
     </a>
     ,
     <a href="http://legacy.python.org/doc/essays/ppt/">
      presentations
     </a>
     and
     <a href="interviews.html">
      interviews
     </a>
     (all about Python), some
     <a href="pics.html">
      pictures of me
     </a>
     ,
     <a href="http://neopythonic.blogspot.com">
      my new blog
     </a>
     , and
my
     <a href="http://www.artima.com/weblogs/index.jsp?blogger=12088">
      old
blog
     </a>
     on Artima.com.  I am
     <a href="https://twitter.com/gvanrossum">
      @gvanrossum
     </a>
     on Twitter.
     <p>
      I am currently a Distinguished Engineer at Microsoft.
I have worked for Dropbox, Google, Elemental Security, Zope
Corporation, BeOpen.com, CNRI, CWI, and SARA.  (See
my
      <a href="Resume.html">
       resume
      </a>
      .)  I created Python while at CWI.
      <h3>
       How to Reach Me
      </h3>
      <p>
       You can send email for me to guido (at) python.org.
I read everything sent there, but I receive too much email to respond
to everything.
       <h3>
        My Name
       </h3>
       <p>
        My name often poses difficulties for Americans.
        <p>
         <b>
          Pronunciation:
         </b>
         in Dutch, the "G" in Guido is a hard G,
pronounced roughly like the "ch" in Scottish "loch".  (Listen to the
         <a href="guido.au">
          sound clip
         </a>
         .)  However, if you're
American, you may also pronounce it as the Italian "Guido".  I'm not
too worried about the associations with mob assassins that some people
have. :-)
         <p>
          <b>
           Spelling:
          </b>
          my last name is two words, and I'd like to keep it
that way, the spelling on some of my credit cards notwithstanding.
Dutch spelling rules dictate that when used in combination with my
first name, "van" is not capitalized: "Guido van Rossum".  But when my
last name is used alone to refer to me, it is capitalized, for
example: "As usual, Van Rossum was right."
          <p>
           <b>
            Alphabetization:
           </b>
           in America, I show up in the alphabet under
"V".  But in Europe, I show up under "R".  And some of my friends put
me under "G" in their address book...
           <h3>
            More Hyperlinks
           </h3>
           <ul>
            <li>
             Here's a collection of
             <a href="http://legacy.python.org/doc/essays/">
              essays
             </a>
             relating to Python
that I've written, including the foreword I wrote for Mark Lutz' book
"Programming Python".
             <p>
              <li>
               I own the official
               <a href="images/license.jpg">
                <img align="center" border="0" height="75" src="images/license_thumb.jpg" width="100"/>
                Python license.
               </a>
               <p>
               </p>
              </li>
             </p>
            </li>
           </ul>
           <h3>
            The Audio File Formats FAQ
           </h3>
           <p>
            I was the original creator and maintainer of the Audio File Formats
FAQ.  It is now maintained by Chris Bagwell
at
            <a href="http://www.cnpbagwell.com/audio-faq">
             http://www.cnpbagwell.com/audio-faq
            </a>
            .  And here is a link to
            <a href="http://sox.sourceforge.net/">
             SOX
            </a>
            , to which I contributed
some early code.
            <hr/>
            <a href="images/internetdog.gif">
             "On the Internet, nobody knows you're
a dog."
            </a>
            <hr/>
           </p>
          </p>
         </p>
        </p>
       </p>
      </p>
     </p>
    </p>
   </p>
  </p>
 </body>
</html>
'''

# Get the title of Guido's webpage: guido_title
guido_title= soup.title

# Print the title of Guido's webpage to the shell
print(guido_title)

# Get Guido's text: guido_text
guido_text= soup.get_text()

# Print Guido's text to the shell
print(guido_text)

'''
<title>Guido's Personal Home Page</title>

Guido van Rossum - Personal Home Page


"Gawky and proud of it."
Who I Am
Read
my "King's
Day Speech" for some inspiration.

I am the author of the Python
programming language.  See also my resume
...

'''

# Find all 'a' tags (which define hyperlinks): a_tags
a_tags= soup.find_all('a')

# Print the URLs to the shell
for link in a_tags:
    print(link.get('href'))

'''
pics.html
pics.html
http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm
images/df20000406.jpg
http://neopythonic.blogspot.com/2016/04/kings-day-speech.html
http://www.python.org
Resume.html
Publications.html
bio.html
http://legacy.python.org/doc/essays/
http://legacy.python.org/doc/essays/ppt/
interviews.html
pics.html
http://neopythonic.blogspot.com
http://www.artima.com/weblogs/index.jsp?blogger=12088
https://twitter.com/gvanrossum
Resume.html
guido.au
http://legacy.python.org/doc/essays/
images/license.jpg
http://www.cnpbagwell.com/audio-faq
http://sox.sourceforge.net/
images/internetdog.gif
'''

# Interacting with APIs to import data from the web -----------------------------------------------------------------

# Load JSON: json_data
with open("a_movie.json") as json_file:
    json_data= json.load(json_file)

# Print each key-value pair in json_data
for k in json_data.keys():
    print(k + ': ', json_data[k])

'''
Title:  The Social Network
Year:  2010
Rated:  PG-13
Released:  01 Oct 2010
Runtime:  120 min
Genre:  Biography, Drama
Director:  David Fincher
Writer:  Aaron Sorkin, Ben Mezrich
Actors:  Jesse Eisenberg, Andrew Garfield, Justin Timberlake
Plot:  As Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, he is sued by the twins who claimed he stole their idea and by the co-founder who was later squeezed out of the business.
Language:  English, French
Country:  United States
Awards:  Won 3 Oscars. 173 wins & 186 nominations total
Poster:  https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg
Ratings:  [{'Source': 'Internet Movie Database', 'Value': '7.8/10'}, {'Source': 'Rotten Tomatoes', 'Value': '96%'}, {'Source': 'Metacritic', 'Value': '95/100'}]
Metascore:  95
imdbRating:  7.8
imdbVotes:  726,546
imdbID:  tt1285016
Type:  movie
DVD:  11 Jan 2011
BoxOffice:  $96,962,694
Production:  N/A
Website:  N/A
Response:  True
'''


# Import package
import requests

# Assign URL to variable: url
url = 'http://www.omdbapi.com/?apikey=72bc447a&t=social+network'

# Package the request, send the request and catch the response: r
r= requests.get(url)

# Decode the JSON data into a dictionary: json_data
json_data= r.json()

# Print each key-value pair in json_data
for k in json_data.keys():
    print(k + ': ', json_data[k])

'''
Title:  The Social Network
Year:  2010
Rated:  PG-13
Released:  01 Oct 2010
Runtime:  120 min
Genre:  Biography, Drama
Director:  David Fincher
Writer:  Aaron Sorkin, Ben Mezrich
Actors:  Jesse Eisenberg, Andrew Garfield, Justin Timberlake
Plot:  As Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, he is sued by the twins who claimed he stole their idea and by the co-founder who was later squeezed out of the business.
Language:  English, French
Country:  United States
Awards:  Won 3 Oscars. 173 wins & 186 nominations total
Poster:  https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg
Ratings:  [{'Source': 'Internet Movie Database', 'Value': '7.8/10'}, {'Source': 'Rotten Tomatoes', 'Value': '96%'}, {'Source': 'Metacritic', 'Value': '95/100'}]
Metascore:  95
imdbRating:  7.8
imdbVotes:  726,546
imdbID:  tt1285016
Type:  movie
DVD:  11 Jan 2011
BoxOffice:  $96,962,694
Production:  N/A
Website:  N/A
Response:  True
'''


# Import package
import requests

# Assign URL to variable: url
url= 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Decode the JSON data into a dictionary: json_data
json_data= r.json()

# Print the Wikipedia page extract
pizza_extract = json_data['query']['pages']['24768']['extract']
print(pizza_extract)

'''
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">
<p class="mw-empty-elt">
</p>
<p><b>Pizza</b> (<span><small>English: </small></span> <i title="English pronunciation respelling"><span>PEET</span>-sə</i>, <small>Italian: </small><span title="Representation in the International Phonetic Alphabet (IPA)" lang="it-Latn-fonipa">[ˈpittsa]</span>, <small>Neapolitan: </small><span title="Representation in the International Phonetic Alphabet (IPA)" lang="nap-Latn-fonipa">[ˈpittsə]</span>) is a dish of Italian origin consisting of a usually round, flat base of leavened wheat-based dough topped with tomatoes, cheese, and often various other ingredients (such as various types of sausage, anchovies, mushrooms, onions, olives, vegetables, meat, ham, etc.), which is then baked at a high temperature, traditionally in a wood-fired oven.</p><p>The term <i>pizza</i> was first recorded in the 10th century in a Latin manuscript from the Southern Italian town of Gaeta in Lazio, on the border with Campania. Raffaele Esposito is often considered to be the father of modern pizza. Modern pizza was invented in Naples. In 2009, Neapolitan pizza was registered with the European Union as a Traditional Speciality Guaranteed dish. In 2017, the art of making Neapolitan pizza was added to UNESCO's list of intangible cultural heritage.</p><p>Pizza and its variants are among the most popular foods in the world. Pizza is sold at a variety of restaurants, including pizzerias (pizza specialty restaurants), Mediterranean restaurants, via delivery, and as street food.  In Italy, pizza served in a restaurant is presented unsliced, and is eaten with the use of a knife and fork. In casual settings, however, it is cut into wedges to be eaten while held in the hand. Pizza is also sold in grocery stores in a variety of forms, including frozen or as kits for self-assembly. They are then cooked using a home oven.
</p><p>In 2017, the world pizza market was US$128 billion, and in the US it was $44 billion spread over 76,000 pizzerias.  Overall, 13% of the U.S. population aged two years and over consumed pizza on any given day.</p>
'''

# Diving deep into the Twitter API -----------------------------------------------------------------

# Store credentials in relevant variables
consumer_key = "nZ6EA0FxZ293SxGNg8g8aP0HM"
consumer_secret = "fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i"
access_token = "1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy"
access_token_secret = "X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx"

# Create your Stream object with credentials
stream = tweepy.Stream(consumer_key, consumer_secret, access_token, access_token_secret)

# Filter your Stream variable
stream.filter(["clinton", "trump", "sanders", "cruz"])

''''''

# Import package
import json

# String of path to file: tweets_data_path
tweets_data_path= 'tweets.txt'

# Initialize empty list to store tweets: tweets_data
tweets_data= []

# Open connection to file
tweets_file = open(tweets_data_path, "r")

# Read in tweets and store in list: tweets_data
for line in tweets_file:
    tweet= json.loads(line)
    tweets_data.append(tweet)

# Close connection to file
tweets_file.close()

# Print the keys of the first tweet dict
print(tweets_data[0].keys())

'''
dict_keys(['in_reply_to_user_id', 'created_at', 'filter_level', 'truncated', 'possibly_sensitive', 'timestamp_ms', 'user', 'text', 'extended_entities', 'in_reply_to_status_id', 'entities', 'favorited', 'retweeted', 'is_quote_status', 'id', 'favorite_count', 'retweeted_status', 'in_reply_to_status_id_str', 'in_reply_to_user_id_str', 'id_str', 'in_reply_to_screen_name', 'coordinates', 'lang', 'place', 'contributors', 'geo', 'retweet_count', 'source'])
'''


# Import package
import pandas as pd

# Build DataFrame of tweet texts and languages
df = pd.DataFrame(tweets_data, columns=['text', 'lang'])

# Print head of DataFrame
print(df.head())

'''
            text                                       lang
0  b"RT @bpolitics: .@krollbondrating's Christoph...   en
1  b'RT @HeidiAlpine: @dmartosko Cruz video found...   en
2  b'Njihuni me Zonj\\xebn Trump !!! | Ekskluzive...   et
3  b"Your an idiot she shouldn't have tried to gr...   en
4  b'RT @AlanLohner: The anti-American D.C. elite...   en
'''



import re

def word_in_text(word, text):
    word = word.lower()
    text = text.lower()
    match = re.search(word, text)

    if match:
        return True
    return False


# Initialize list to store tweet counts
[clinton, trump, sanders, cruz] = [0, 0, 0, 0]

# Iterate through df, counting the number of tweets in which
# each candidate is mentioned
for index, row in df.iterrows():
    clinton += word_in_text('clinton', row['text'])
    trump += word_in_text('trump', row['text'])
    sanders += word_in_text('sanders', row['text'])
    cruz += word_in_text('cruz', row['text'])


# Import packages
import seaborn as sns
import matplotlib.pyplot as plt


# Set seaborn style
sns.set(color_codes=True)

# Create a list of labels:cd
cd = ['clinton', 'trump', 'sanders', 'cruz']

# Plot the bar chart
ax = sns.barplot(cd, [clinton, trump, sanders, cruz])
ax.set(ylabel="count")
plt.show()

''''''